{"ast":null,"code":"import React from\"react\";import PREPLesson from\"./Lesson\";import CodeBlock from\"../../components/CodeBlock\";import{Header}from\"semantic-ui-react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function PREPLesson9(){return/*#__PURE__*/_jsxs(PREPLesson,{header:\"Recursion\",description:\"Recursion is a very important topic in computer science, and it can be tricky at first! Recursion is essentially when a function calls itself in its body. All three of us struggled (and still struggle!) with recursion at some point, and by far the most important step one can take to master it is to practice continously. Subsequently, we'll go over some practice in the second half of this lesson.\",slideSrc:\"https://docs.google.com/presentation/d/e/2PACX-1vQgsTEgtHfQy4spy13gpH2pSf0jH2Vp9P0Fuphg0sRJHbnnV1xDTfYXNsQtE2g_74-ZWfg9vMGn3nf-/embed?start=false&loop=false&delayms=3000\",prevLesson:null,nextLesson:\"\",slideLink:\"https://docs.google.com/presentation/d/1WvbeP9aJ__6h1V7jSOXIMbfclHczygiEMflrcXmqJSs/edit?usp=sharing\",lessonDownload:\"./prepDownloads/prep_lesson9.zip\",videoSrc:\"https://www.youtube.com/embed/hFAgvMiIkHI\",children:[/*#__PURE__*/_jsx(Header,{as:\"h3\",children:\"Practice Problem Solutions:\"}),/*#__PURE__*/_jsx(CodeBlock,{code:\"\\n\\\"\\\"\\\"\\nNOTE: THERE WERE ERRORS IN THE DOCTESTS. IF YOUR CODE IS OUTPUTTING THE RIGHT THING\\nTHEN IT IS MOST LIKELY RIGHT. CHECK DOWN BELOW FOR THE ERRORS. THERE ARE COMMENTS\\nIN THE DOCSTRINGS WHERE THE ERRORS WERE.\\n\\\"\\\"\\\"\\n\\n\\nfn = lambda x: lambda y: pow(x, y)\\n\\ndef map_recursive(start, end, f):\\n    \\\"\\\"\\\"Implement map_to_range from Tuesday's lesson recursively\\n    \\n    >>> map_recursive(0, 10, fn(2))         ## there was accidentally two 128's in doctest\\n    1\\n    2\\n    4\\n    8\\n    16\\n    32\\n    64\\n    128        \\n    256\\n    512\\n    \\\"\\\"\\\"\\n    if start == end:\\n        return\\n    print(f(start))\\n    return map_recursive(start + 1, end, f)\\n\\n\\ndef fib(i):\\n    \\\"\\\"\\\"Return the i-th term of the Fibonacci Sequence.\\n    \\n    >>> fib(2)    # --> 0 + 1\\n    1\\n    >>> fib(5)    # --> 2 + 3\\n    5\\n    >>> fib(10)   # --> 21 + 34\\n    55\\n    \\\"\\\"\\\"\\n    if i == 0:\\n        return 0\\n    elif i == 1:\\n        return 1\\n    else:\\n        return fib(i - 1) + fib(i - 2)\\n\\n\\ndef factorial_hof(n):\\n    \\\"\\\"\\\"Now that we have defined factorial using iteration and recursion,\\n    implement it using a higher order function. You are not allowed to use\\n    operators outside of the function calls. \\n    --> Think about what we can do to store a counter\\n\\n    >>> factorial_hof(5)\\n    120\\n    >>> factorial_hof(6) ## error in this doctect\\n    720\\n    \\\"\\\"\\\"\\n    def helper(x, y):\\n        if x == 0:\\n            return y\\n        else:\\n            return helper(x - 1, y * x)\\n    return helper(n, 1)\\n\"})]});}export default PREPLesson9;","map":{"version":3,"sources":["/Users/destul/Desktop/cs-central/src/pages/PREP/PREPLesson9.js"],"names":["React","PREPLesson","CodeBlock","Header","PREPLesson9"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,UAAP,KAAuB,UAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,4BAAtB,CACA,OAASC,MAAT,KAAuB,mBAAvB,C,wFAGA,QAASC,CAAAA,WAAT,EAAuB,CACrB,mBACE,MAAC,UAAD,EACE,MAAM,CAAC,WADT,CAEE,WAAW,CAAC,gZAFd,CAME,QAAQ,4KANV,CAOE,UAAU,CAAE,IAPd,CAQE,UAAU,CAAC,EARb,CASE,SAAS,CAAC,sGATZ,CAUE,cAAc,CAAC,kCAVjB,CAWE,QAAQ,4CAXV,wBAcE,KAAC,MAAD,EAAQ,EAAE,CAAE,IAAZ,yCAdF,cAgBE,KAAC,SAAD,EACE,IAAI,0gDADN,EAhBF,GADF,CA0FD,CAED,cAAeA,CAAAA,WAAf","sourcesContent":["import React from \"react\";\n\nimport PREPLesson from \"./Lesson\";\nimport CodeBlock from \"../../components/CodeBlock\";\nimport { Header } from \"semantic-ui-react\";\n\n\nfunction PREPLesson9() {\n  return (\n    <PREPLesson\n      header=\"Recursion\"\n      description=\"Recursion is a very important topic in computer science, and it can be tricky at first! Recursion is essentially\n          when a function calls itself in its body. All three of us struggled (and still struggle!) with recursion at some point,\n          and by far the most important step one can take to master it is to practice continously. Subsequently, we'll go over some\n          practice in the second half of this lesson.\"\n      slideSrc={`https://docs.google.com/presentation/d/e/2PACX-1vQgsTEgtHfQy4spy13gpH2pSf0jH2Vp9P0Fuphg0sRJHbnnV1xDTfYXNsQtE2g_74-ZWfg9vMGn3nf-/embed?start=false&loop=false&delayms=3000`}\n      prevLesson={null}\n      nextLesson=\"\"\n      slideLink=\"https://docs.google.com/presentation/d/1WvbeP9aJ__6h1V7jSOXIMbfclHczygiEMflrcXmqJSs/edit?usp=sharing\"\n      lessonDownload=\"./prepDownloads/prep_lesson9.zip\"\n      videoSrc={`https://www.youtube.com/embed/hFAgvMiIkHI`}\n    >\n\n      <Header as={\"h3\"}>Practice Problem Solutions:</Header>\n\n      <CodeBlock\n        code={`\n\"\"\"\nNOTE: THERE WERE ERRORS IN THE DOCTESTS. IF YOUR CODE IS OUTPUTTING THE RIGHT THING\nTHEN IT IS MOST LIKELY RIGHT. CHECK DOWN BELOW FOR THE ERRORS. THERE ARE COMMENTS\nIN THE DOCSTRINGS WHERE THE ERRORS WERE.\n\"\"\"\n\n\nfn = lambda x: lambda y: pow(x, y)\n\ndef map_recursive(start, end, f):\n    \"\"\"Implement map_to_range from Tuesday's lesson recursively\n    \n    >>> map_recursive(0, 10, fn(2))         ## there was accidentally two 128's in doctest\n    1\n    2\n    4\n    8\n    16\n    32\n    64\n    128        \n    256\n    512\n    \"\"\"\n    if start == end:\n        return\n    print(f(start))\n    return map_recursive(start + 1, end, f)\n\n\ndef fib(i):\n    \"\"\"Return the i-th term of the Fibonacci Sequence.\n    \n    >>> fib(2)    # --> 0 + 1\n    1\n    >>> fib(5)    # --> 2 + 3\n    5\n    >>> fib(10)   # --> 21 + 34\n    55\n    \"\"\"\n    if i == 0:\n        return 0\n    elif i == 1:\n        return 1\n    else:\n        return fib(i - 1) + fib(i - 2)\n\n\ndef factorial_hof(n):\n    \"\"\"Now that we have defined factorial using iteration and recursion,\n    implement it using a higher order function. You are not allowed to use\n    operators outside of the function calls. \n    --> Think about what we can do to store a counter\n\n    >>> factorial_hof(5)\n    120\n    >>> factorial_hof(6) ## error in this doctect\n    720\n    \"\"\"\n    def helper(x, y):\n        if x == 0:\n            return y\n        else:\n            return helper(x - 1, y * x)\n    return helper(n, 1)\n`} \n      />\n\n    \n    </PREPLesson>\n  );\n}\n\nexport default PREPLesson9;\n"]},"metadata":{},"sourceType":"module"}