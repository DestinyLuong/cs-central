{"ast":null,"code":"import React from\"react\";import\"../../App.css\";import MainNav from\"../../components/MainNav\";import Footer from\"../../components/Footer\";import Slide from\"../../components/Slide\";import{Header,Button}from\"semantic-ui-react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Lesson2(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(MainNav,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"wmcode-page\",children:[/*#__PURE__*/_jsx(Header,{as:\"h1\",children:\"Lesson 2 - Assignment Cont'd, and Functions\"}),/*#__PURE__*/_jsx(\"a\",{href:\"./wmcodeDownloads/wm_lesson2.zip\",download:true,children:/*#__PURE__*/_jsx(Button,{basic:true,color:\"blue\",children:\"Download Lesson\"})}),/*#__PURE__*/_jsx(\"br\",{}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Slide,{src:\"https://docs.google.com/presentation/d/e/2PACX-1vT4tenv432KCZyFADvjqj5kUiGWVhbVL4SjLhZdhc8_YEmTiydI0mZgXEno_9eec3WNN_RINpzDf26h/embed?start=false&loop=false&delayms=3000\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Lesson Content:\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Functions:\"}),\"Functions are a way of working with unknown values, and producing a desired value for all combinations. Functions are instantiated by the\",\" \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"def\"}),\" statement and are made up of 4 parts -- each necessary for understandable code. They are:\",/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Function Name\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Parameters\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Docstring\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Function Body\"})]}),\"Let's write the \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"add()\"}),\" function together, part by part, and then put it together at the end.\",/*#__PURE__*/_jsx(\"h3\",{children:\"Function Names:\"}),\"Function names are given based on what the purpose of a function is. If a function counts the number of students at MWA, we might call that function \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"count_wave_makers\"}),\". If we want a function that creates a story, we might name it\",\" \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"create_story\"}),\". Function names are always written in \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"\\\"snake_case\\\"\"}),\"; this means that instead of spaces, we use underscores.\",/*#__PURE__*/_jsxs(\"pre\",{children:[\"this_is_written_in_snake_case\",\"\\n\",\"\\n\",\"so_is_this\",\"\\n\",\"\\n\",\"count_17th_wave\",\"\\n\",\"\\n\",\"# --> These are all valid function names\",\"\\n\",\"\\n\",\"# --> However, in practice, function names should be short so they can be referred to easily.\",\"\\n\",\"\\n\",\"# Following these guidelines, a good name for our function, add, is just that. The first line of our function will be:\",\"\\n\",\"\\n\",\"def add\"]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Function Parameters:\"}),\"Functions use parameters to refer to user inputs within the function body. Parameters make any input vague, and that is a good thing for writing good functions. We refer to input by using the parameters of the function. Parameters of any function are defined within a set of parenthesis, \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"()\"}),\", and seperated by commas. The statement is ended with a colon,\",\" \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\":\"}),\".\",/*#__PURE__*/_jsxs(\"pre\",{children:[\"# Our add() function is going to take in two parameters: \",/*#__PURE__*/_jsx(\"b\",{children:\"x\"}),\" \",\"and \",/*#__PURE__*/_jsx(\"b\",{children:\"y\"}),\". We will refer to objects passed in using these two parameters.\",\"\\n\",\"\\n\",\"# So far, our function looks like this:\",\"\\n\",\"\\n\",\"def add(x, y):\",\"\\n\"]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Function Docstring:\"}),\"The \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"docstring\"}),\" of a function is where the description of a function goes. This text is a comment that gives us two things:\",/*#__PURE__*/_jsxs(\"ol\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"A Function Description\"}),/*#__PURE__*/_jsx(\"ul\",{children:/*#__PURE__*/_jsxs(\"li\",{children:[\"The description tells exactly what the function should do, and how we should expect it to work once it is fully implemented. The docstring is necessary for \",/*#__PURE__*/_jsx(\"i\",{children:\"other people\"}),\" to understand your code, not so much for python.\"]})}),/*#__PURE__*/_jsx(\"li\",{children:\"Test Cases\"}),/*#__PURE__*/_jsx(\"ul\",{children:/*#__PURE__*/_jsx(\"li\",{children:\"Test cases are written exactly how we'd see them in the Python terminal. They show us examples of how the function should work with different kinds of inputs.\"})})]}),/*#__PURE__*/_jsxs(\"pre\",{children:[\"# A valid docstring for our function,\",\" \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"add\"}),\" contains a good description about its implementation,\",\"\\n\",\"#\",\"       \",\"and provides examples, test cases, of how it should work. It may look like this:\",\"\\n\",\"\\n\",\"\\\"\\\"\\\"add is a function that takes in two numbers, x and y, and returns their sum\",\"\\n\",\">>> add(3, 5)\",\"\\n\",\"8\",\"\\n\",\">>> add(98, -12)\",\"\\n\",\"86\",\"\\n\",\"\\\"\\\"\\\"\",\"\\n\",\"\\n\",\"# Putting what we have together, our function, so far, is:\",\"\\n\",\"\\n\",\"def add(x, y):\",\"\\n\",\"    \",\"\\\"\\\"\\\"add is a function that takes in two numbers, x and y, and returns their sum\",\"\\n\",\"    \",\">>> add(3, 5)\",\"\\n\",\"    \",\"8\",\"\\n\",\"    \",\">>> add(98, -12)\",\"\\n\",\"    \",\"86\",\"\\n\",\"    \",\"\\\"\\\"\\\"\",\"\\n\"]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Function Body:\"}),\"The function body is where the magic of the function truly happens. This is where the parameters are manipulated and operations are executed. The key is to always refer to parameter names, and never specific values. If you do that, your function will only work for those specific values. Referring to values loosely using parameters allows functions to work exactly the same on any parameters.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"b\",{children:\"NOTE:\"}),\" The \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"return\"}),\" statement is very important in functions. This is the very last thing in any function and it will exit the function body. Anything that you want a function to do needs to happen before returning.\",/*#__PURE__*/_jsxs(\"pre\",{children:[\"# For our function, \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"add\"}),\", a valid function body is as follows:\",\"\\n\",\"\\n\",\"sum = x + y\",\"     \",\"--> parameter values x and y are summed together and stored in the sum variable\",\"\\n\",\"return sum\",\"      \",\"--> we return that sum and exit out of the function\",\"\\n\",\"\\n\",\"# putting our function together, we have:\",\"\\n\",\"\\n\",\"def add(x, y):\",\"\\n\",\"    \",\"\\\"\\\"\\\"add is a function that takes in two numbers, x and y, and returns their sum\",\"\\n\",\"    \",\">>> add(3, 5)\",\"\\n\",\"    \",\"8\",\"\\n\",\"    \",\">>> add(98, -12)\",\"\\n\",\"    \",\"86\",\"\\n\",\"    \",\"\\\"\\\"\\\"\",\"\\n\",\"    \",\"sum = x + y\",\"\\n\",\"    \",\"return sum\",\"\\n\"]}),/*#__PURE__*/_jsx(\"h3\",{children:\"CONGRATS! YOU JUST WROTE YOUR FIRST FUNCTION!!!\"})]})]}),/*#__PURE__*/_jsx(Footer,{})]});}export default Lesson2;","map":{"version":3,"sources":["/Users/destul/Desktop/cs-central/src/pages/WMCode/Lesson2.js"],"names":["React","MainNav","Footer","Slide","Header","Button","Lesson2","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../../App.css\";\n\nimport MainNav from \"../../components/MainNav\";\nimport Footer from \"../../components/Footer\";\nimport Slide from \"../../components/Slide\";\n\nimport { Header, Button } from \"semantic-ui-react\";\n\nfunction Lesson2() {\n  return (\n    <div>\n      <MainNav />\n      <div className=\"wmcode-page\">\n        <Header as={\"h1\"}>Lesson 2 - Assignment Cont'd, and Functions</Header>\n        <a href=\"./wmcodeDownloads/wm_lesson2.zip\" download>\n          <Button basic color=\"blue\">\n            Download Lesson\n          </Button>\n        </a>\n        <br /> <br />\n        <br />\n        <Slide src=\"https://docs.google.com/presentation/d/e/2PACX-1vT4tenv432KCZyFADvjqj5kUiGWVhbVL4SjLhZdhc8_YEmTiydI0mZgXEno_9eec3WNN_RINpzDf26h/embed?start=false&loop=false&delayms=3000\" />\n        <div>\n          <h2>Lesson Content:</h2>\n          <h3>Functions:</h3>\n          Functions are a way of working with unknown values, and producing a\n          desired value for all combinations. Functions are instantiated by the{\" \"}\n          <b style={{ color: \"blue\" }}>def</b> statement and are made up of 4\n          parts -- each necessary for understandable code. They are:\n          <ul>\n            <li>Function Name</li>\n            <li>Parameters</li>\n            <li>Docstring</li>\n            <li>Function Body</li>\n          </ul>\n          Let's write the <b style={{ color: \"blue\" }}>add()</b> function\n          together, part by part, and then put it together at the end.\n          <h3>Function Names:</h3>\n          Function names are given based on what the purpose of a function is.\n          If a function counts the number of students at MWA, we might call that\n          function <b style={{ color: \"blue\" }}>count_wave_makers</b>. If we\n          want a function that creates a story, we might name it{\" \"}\n          <b style={{ color: \"blue\" }}>create_story</b>. Function names are\n          always written in <b style={{ color: \"blue\" }}>\"snake_case\"</b>; this\n          means that instead of spaces, we use underscores.\n          <pre>\n            this_is_written_in_snake_case{\"\\n\"}\n            {\"\\n\"}so_is_this{\"\\n\"}\n            {\"\\n\"}count_17th_wave{\"\\n\"}\n            {\"\\n\"}# --&gt; These are all valid function names{\"\\n\"}\n            {\"\\n\"}# --&gt; However, in practice, function names should be short\n            so they can be referred to easily.{\"\\n\"}\n            {\"\\n\"}# Following these guidelines, a good name for our function,\n            add, is just that. The first line of our function will be:{\"\\n\"}\n            {\"\\n\"}def add\n          </pre>\n          <h3>Function Parameters:</h3>\n          Functions use parameters to refer to user inputs within the function\n          body. Parameters make any input vague, and that is a good thing for\n          writing good functions. We refer to input by using the parameters of\n          the function. Parameters of any function are defined within a set of\n          parenthesis, <b style={{ color: \"blue\" }}>()</b>, and seperated by\n          commas. The statement is ended with a colon,{\" \"}\n          <b style={{ color: \"blue\" }}>:</b>.\n          <pre>\n            # Our add() function is going to take in two parameters: <b>x</b>{\" \"}\n            and <b>y</b>. We will refer to objects passed in using these two\n            parameters.{\"\\n\"}\n            {\"\\n\"}# So far, our function looks like this:{\"\\n\"}\n            {\"\\n\"}def add(x, y):{\"\\n\"}\n          </pre>\n          <h3>Function Docstring:</h3>\n          The <b style={{ color: \"blue\" }}>docstring</b> of a function is where\n          the description of a function goes. This text is a comment that gives\n          us two things:\n          <ol>\n            <li>A Function Description</li>\n            <ul>\n              <li>\n                The description tells exactly what the function should do, and\n                how we should expect it to work once it is fully implemented.\n                The docstring is necessary for <i>other people</i> to understand\n                your code, not so much for python.\n              </li>\n            </ul>\n            <li>Test Cases</li>\n            <ul>\n              <li>\n                Test cases are written exactly how we'd see them in the Python\n                terminal. They show us examples of how the function should work\n                with different kinds of inputs.\n              </li>\n            </ul>\n          </ol>\n          <pre>\n            # A valid docstring for our function,{\" \"}\n            <b style={{ color: \"blue\" }}>add</b> contains a good description\n            about its implementation,{\"\\n\"}#{\"       \"}and provides examples,\n            test cases, of how it should work. It may look like this:{\"\\n\"}\n            {\"\\n\"}\"\"\"add is a function that takes in two numbers, x and y, and\n            returns their sum{\"\\n\"}&gt;&gt;&gt; add(3, 5){\"\\n\"}8{\"\\n\"}\n            &gt;&gt;&gt; add(98, -12){\"\\n\"}86{\"\\n\"}\"\"\"{\"\\n\"}\n            {\"\\n\"}# Putting what we have together, our function, so far, is:\n            {\"\\n\"}\n            {\"\\n\"}def add(x, y):{\"\\n\"}\n            {\"    \"}\"\"\"add is a function that takes in two numbers, x and y, and\n            returns their sum{\"\\n\"}\n            {\"    \"}&gt;&gt;&gt; add(3, 5){\"\\n\"}\n            {\"    \"}8{\"\\n\"}\n            {\"    \"}&gt;&gt;&gt; add(98, -12){\"\\n\"}\n            {\"    \"}86{\"\\n\"}\n            {\"    \"}\"\"\"{\"\\n\"}\n          </pre>\n          <h3>Function Body:</h3>\n          The function body is where the magic of the function truly happens.\n          This is where the parameters are manipulated and operations are\n          executed. The key is to always refer to parameter names, and never\n          specific values. If you do that, your function will only work for\n          those specific values. Referring to values loosely using parameters\n          allows functions to work exactly the same on any parameters.\n          <br />\n          <br />\n          <b>NOTE:</b> The <b style={{ color: \"blue\" }}>return</b> statement is\n          very important in functions. This is the very last thing in any\n          function and it will exit the function body. Anything that you want a\n          function to do needs to happen before returning.\n          <pre>\n            # For our function, <b style={{ color: \"blue\" }}>add</b>, a valid\n            function body is as follows:{\"\\n\"}\n            {\"\\n\"}sum = x + y{\"     \"}--&gt; parameter values x and y are summed\n            together and stored in the sum variable{\"\\n\"}return sum{\"      \"}\n            --&gt; we return that sum and exit out of the function{\"\\n\"}\n            {\"\\n\"}# putting our function together, we have:{\"\\n\"}\n            {\"\\n\"}def add(x, y):{\"\\n\"}\n            {\"    \"}\"\"\"add is a function that takes in two numbers, x and y, and\n            returns their sum{\"\\n\"}\n            {\"    \"}&gt;&gt;&gt; add(3, 5){\"\\n\"}\n            {\"    \"}8{\"\\n\"}\n            {\"    \"}&gt;&gt;&gt; add(98, -12){\"\\n\"}\n            {\"    \"}86{\"\\n\"}\n            {\"    \"}\"\"\"{\"\\n\"}\n            {\"    \"}sum = x + y{\"\\n\"}\n            {\"    \"}return sum{\"\\n\"}\n          </pre>\n          <h3>CONGRATS! YOU JUST WROTE YOUR FIRST FUNCTION!!!</h3>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Lesson2;\n"]},"metadata":{},"sourceType":"module"}