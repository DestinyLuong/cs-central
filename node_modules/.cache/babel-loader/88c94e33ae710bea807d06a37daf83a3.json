{"ast":null,"code":"import React from\"react\";import\"../../App.css\";import MainNav from\"../../components/MainNav\";import Footer from\"../../components/Footer\";import Slide from\"../../components/Slide\";import{Header,Button}from\"semantic-ui-react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Lesson5(){return/*#__PURE__*/_jsxs(\"div\",{className:\"wmcode-page\",children:[/*#__PURE__*/_jsx(MainNav,{}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{as:\"h1\",children:\"Lesson 5 - Booleans\"}),/*#__PURE__*/_jsx(\"a\",{href:\"./wmcodeDownloads/wm_lesson5.zip\",download:true,children:/*#__PURE__*/_jsx(Button,{basic:true,color:\"blue\",children:\"Download Lesson\"})}),/*#__PURE__*/_jsx(\"br\",{}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Slide,{src:\"https://docs.google.com/presentation/d/e/2PACX-1vQyrNJIQSFlBhPE513yeLkuhEAXhUvtfrIBo32Lg9wfTJc88Lk9klKNbL8JXwur8XQV7BkS1Lzrd7Cp/embed?start=false&loop=false&delayms=3000\"}),/*#__PURE__*/_jsx(\"br\",{})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Lesson Content:\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Boolean Values - Motivation\"}),\"To motivate what Boolean value is, and what it does, let's play a guessing game.\",/*#__PURE__*/_jsx(\"br\",{}),\"** See the slides for a full demo of the guessing game **\",/*#__PURE__*/_jsx(\"h3\",{children:\"Coding Demo\"}),\"To gain a better understanding of what is going one, it is best that we write what Python is actually interpreting under its magical hood.\",/*#__PURE__*/_jsx(\"br\",{}),\"First, we intuitively write out our code with helper functions that will determine what is happening in comparisons, without any effort. We compare their return values to \",/*#__PURE__*/_jsx(\"b\",{children:\"True\"}),\" and \",/*#__PURE__*/_jsx(\"b\",{children:\"False\"}),\" because it makes sense. Here's what we will have at this point:\",/*#__PURE__*/_jsxs(\"pre\",{children:[\"real_num = 10\",\"\\n\",\"\\n\",\"def over_under(guess):\",\"\\n\",\"\\u201C\\u201C\\u201Cover_under is a guessing game that uses user input to generate hints.\\u201D\\u201D\\u201D\",\"\\n\",\"    \",\"if guess == real_num:\",\"\\n\",\"        \",\"print(\\u201CYay! You guessed it!\\u201D)\",\"\\n\",\"    \",\"elif is_over(guess) == True:\",\"\\n\",\"        \",\"print(\\u201CTry something lower than that.\\u201D)\",\"\\n\",\"    \",\"elif is_under(guess) == True:\",\"\\n\",\"    \",\"print(\\u201CTry something bigger.\\u201D)\",\"\\n\"]}),\"After deciding that this implementation WILL work for anything, then we can move onto out helper functions, and decide how to write them. **See the video for more about these helpers.** After writing them, they may look like:\",/*#__PURE__*/_jsxs(\"pre\",{children:[\"def is_over(guess):\",\"\\n\",\"    \",\"return guess > real_num\",\"\\n\",\"\\n\",\"def is_under(guess):\",\"\\n\",\"    \",\"return guess < real_num\",\"\\n\"]}),/*#__PURE__*/_jsx(\"h3\",{children:\"What Just Happened?\"}),/*#__PURE__*/_jsx(\"h4\",{children:\"As humans, we ask ourselves:\"}),/*#__PURE__*/_jsx(\"i\",{children:\"\\u201CIs the current guess over or under the true value?\\u201D\"}),/*#__PURE__*/_jsx(\"br\",{}),\"We get, as a response:\",/*#__PURE__*/_jsx(\"i\",{children:\"\\u201CYes\\u201D\"}),\" or \",/*#__PURE__*/_jsx(\"i\",{children:\"\\u201CNo\\u201D\"}),\".\",/*#__PURE__*/_jsx(\"h4\",{children:\"Python is a little more sophisticated. It asks:\"}),/*#__PURE__*/_jsx(\"i\",{style:{color:\"blue\"},children:\"is_over(guess)\"}),\" or\",\" \",/*#__PURE__*/_jsx(\"i\",{style:{color:\"blue\"},children:\"is_under(guess)\"}),\"?\",/*#__PURE__*/_jsx(\"br\",{}),\"It expects:\",/*#__PURE__*/_jsx(\"i\",{style:{color:\"orange\"},children:\"True\"}),\" or\",\" \",/*#__PURE__*/_jsx(\"i\",{style:{color:\"orange\"},children:\"False\"}),\".\",/*#__PURE__*/_jsx(\"h3\",{children:\"Comparing Humans and Python\"}),\"Both humans, and Python seek either of a:\",/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Positive response, or\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Negative response,\"})]}),\"And will do something differently depending on the response. For us, it is very easy to determine what is over/under, left/right, next/last, etc.\",/*#__PURE__*/_jsx(\"br\",{}),\"But, we have various different ways of expressing these things; a funny look, a slap on the wrist, getting yelled at, etc.\",/*#__PURE__*/_jsx(\"br\",{}),\"For Python, there are only certain things that can represent either a yes or no. These values are split into two categories:\",/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"False-y values, and\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Truth-y values\"})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Python Boolean Values\"}),/*#__PURE__*/_jsx(\"h4\",{children:\"False-y Values:\"}),\"Python has 4 types of \",/*#__PURE__*/_jsx(\"b\",{children:\"False\"}),\" values:\",/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Empty objects\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Strings, Array, Lists, and Dictionaries\"}),/*#__PURE__*/_jsx(\"li\",{children:\"We will talk more about all of these in later lessons.\"})]}),/*#__PURE__*/_jsx(\"li\",{children:\"The number 0\"}),/*#__PURE__*/_jsxs(\"li\",{children:[\"The value \",/*#__PURE__*/_jsx(\"i\",{style:{color:\"orange\"},children:\"null\"}),\", and\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"The value \",/*#__PURE__*/_jsx(\"i\",{style:{color:\"orange\"},children:\"False\"})]})]}),/*#__PURE__*/_jsx(\"h4\",{children:\"Truth-y Values\"}),\"Python has one main type of \",/*#__PURE__*/_jsx(\"b\",{children:\"True\"}),\" value.\",/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[\"Everything that is not \",/*#__PURE__*/_jsx(\"b\",{children:\"False\"})]}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Objects with data stored in them.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Any number not 0, and\"}),/*#__PURE__*/_jsxs(\"li\",{children:[\"The value \",/*#__PURE__*/_jsx(\"i\",{style:{color:\"orange\"},children:\"True\"})]})]})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Refactoring Our Code\"}),\"Though our functions from earlier were nice, and pretty, they were actually quite clunky. By taking advantage of boolean identities, we can actually make things a lot easier to read, and completely get rid of our helper functions.\",/*#__PURE__*/_jsx(\"br\",{}),\"Our new function may look something like this:\",/*#__PURE__*/_jsxs(\"pre\",{children:[\"real_num = 10\",\"\\n\",\"def over_under(guess):\",\"\\n\",\"    \",\"\\u201C\\u201C\\u201Cover_under is a guessing game that uses user input to generate hints.\\u201D\\u201D\\u201D\",\"\\n\",\"    \",\"if guess == real_num:\",\"\\n\",\"        \",\"print(\\u201CYay! You guessed it!\\u201D)\",\"\\n\",\"    \",\"elif guess > real_num:\",\"\\n\",\"        \",\"print(\\u201CTry something lower than that.\\u201D)\",\"\\n\",\"    \",\"elif guess < real_num:\",\"\\n\",\"        \",\"print(\\u201CTry something bigger.\\u201D)\",\"\\n\"]}),\"(See the video for more notes on how this is actually better!)\",/*#__PURE__*/_jsx(\"h3\",{children:\"Now, Why Are Booleans Useful?\"}),\"Boolean values serve as additional levels of robustness for our code.\",/*#__PURE__*/_jsx(\"br\",{}),\"Booleans make special cases easy to catch, with minimal code.\",/*#__PURE__*/_jsx(\"br\",{}),\"Keeps redundancy away.\",/*#__PURE__*/_jsx(\"br\",{}),\"We don\\u2019t have to write functions to explicitly tell Python what is good or bad.\",/*#__PURE__*/_jsx(\"h3\",{children:\"Final Note\"}),\"If you are ever curious about what something in Python's boolean return value is, you can use the built-in Python\",\" \",/*#__PURE__*/_jsx(\"b\",{style:{color:\"blue\"},children:\"bool()\"}),\" function with your item as the parameter, and Python will tell you!!\",/*#__PURE__*/_jsx(\"h1\",{children:\"...\"})]}),/*#__PURE__*/_jsx(Footer,{})]});}export default Lesson5;","map":{"version":3,"sources":["/Users/destul/Desktop/cs-central/src/pages/WMCode/Lesson5.js"],"names":["React","MainNav","Footer","Slide","Header","Button","Lesson5","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../../App.css\";\n\nimport MainNav from \"../../components/MainNav\";\nimport Footer from \"../../components/Footer\";\nimport Slide from \"../../components/Slide\";\n\nimport { Header, Button } from \"semantic-ui-react\";\n\nfunction Lesson5() {\n  return (\n    <div className=\"wmcode-page\">\n      <MainNav />\n      <div>\n        <Header as={\"h1\"}>Lesson 5 - Booleans</Header>\n        <a href=\"./wmcodeDownloads/wm_lesson5.zip\" download>\n          <Button basic color=\"blue\">\n            Download Lesson\n          </Button>\n        </a>\n        <br /> <br />\n        <br />\n        <Slide src=\"https://docs.google.com/presentation/d/e/2PACX-1vQyrNJIQSFlBhPE513yeLkuhEAXhUvtfrIBo32Lg9wfTJc88Lk9klKNbL8JXwur8XQV7BkS1Lzrd7Cp/embed?start=false&loop=false&delayms=3000\" />\n        <br />\n      </div>\n\n      <div>\n        <h2>Lesson Content:</h2>\n        <h3>Boolean Values - Motivation</h3>\n        To motivate what Boolean value is, and what it does, let's play a\n        guessing game.\n        <br />\n        ** See the slides for a full demo of the guessing game **\n        <h3>Coding Demo</h3>\n        To gain a better understanding of what is going one, it is best that we\n        write what Python is actually interpreting under its magical hood.\n        <br />\n        First, we intuitively write out our code with helper functions that will\n        determine what is happening in comparisons, without any effort. We\n        compare their return values to <b>True</b> and <b>False</b> because it\n        makes sense. Here's what we will have at this point:\n        <pre>\n          real_num = 10{\"\\n\"}\n          {\"\\n\"}def over_under(guess):{\"\\n\"}“““over_under is a guessing game\n          that uses user input to generate hints.”””{\"\\n\"}\n          {\"    \"}if guess == real_num:{\"\\n\"}\n          {\"        \"}print(“Yay! You guessed it!”){\"\\n\"}\n          {\"    \"}elif is_over(guess) == True:{\"\\n\"}\n          {\"        \"}print(“Try something lower than that.”){\"\\n\"}\n          {\"    \"}elif is_under(guess) == True:{\"\\n\"}\n          {\"    \"}print(“Try something bigger.”){\"\\n\"}\n        </pre>\n        After deciding that this implementation WILL work for anything, then we\n        can move onto out helper functions, and decide how to write them. **See\n        the video for more about these helpers.** After writing them, they may\n        look like:\n        <pre>\n          def is_over(guess):{\"\\n\"}\n          {\"    \"}return guess &gt; real_num{\"\\n\"}\n          {\"\\n\"}def is_under(guess):{\"\\n\"}\n          {\"    \"}return guess &lt; real_num{\"\\n\"}\n        </pre>\n        <h3>What Just Happened?</h3>\n        <h4>As humans, we ask ourselves:</h4>\n        <i>“Is the current guess over or under the true value?”</i>\n        <br />\n        We get, as a response:\n        <i>“Yes”</i> or <i>“No”</i>.\n        <h4>Python is a little more sophisticated. It asks:</h4>\n        <i style={{ color: \"blue\" }}>is_over(guess)</i> or{\" \"}\n        <i style={{ color: \"blue\" }}>is_under(guess)</i>?\n        <br />\n        It expects:\n        <i style={{ color: \"orange\" }}>True</i> or{\" \"}\n        <i style={{ color: \"orange\" }}>False</i>.\n        <h3>Comparing Humans and Python</h3>\n        Both humans, and Python seek either of a:\n        <ul>\n          <li>Positive response, or</li>\n          <li>Negative response,</li>\n        </ul>\n        And will do something differently depending on the response. For us, it\n        is very easy to determine what is over/under, left/right, next/last,\n        etc.\n        <br />\n        But, we have various different ways of expressing these things; a funny\n        look, a slap on the wrist, getting yelled at, etc.\n        <br />\n        For Python, there are only certain things that can represent either a\n        yes or no. These values are split into two categories:\n        <ul>\n          <li>False-y values, and</li>\n          <li>Truth-y values</li>\n        </ul>\n        <h3>Python Boolean Values</h3>\n        <h4>False-y Values:</h4>\n        Python has 4 types of <b>False</b> values:\n        <ul>\n          <li>Empty objects</li>\n          <ul>\n            <li>Strings, Array, Lists, and Dictionaries</li>\n            <li>We will talk more about all of these in later lessons.</li>\n          </ul>\n          <li>The number 0</li>\n          <li>\n            The value <i style={{ color: \"orange\" }}>null</i>, and\n          </li>\n          <li>\n            The value <i style={{ color: \"orange\" }}>False</i>\n          </li>\n        </ul>\n        <h4>Truth-y Values</h4>\n        Python has one main type of <b>True</b> value.\n        <ul>\n          <li>\n            Everything that is not <b>False</b>\n          </li>\n          <ul>\n            <li>Objects with data stored in them.</li>\n            <li>Any number not 0, and</li>\n            <li>\n              The value <i style={{ color: \"orange\" }}>True</i>\n            </li>\n          </ul>\n        </ul>\n        <h3>Refactoring Our Code</h3>\n        Though our functions from earlier were nice, and pretty, they were\n        actually quite clunky. By taking advantage of boolean identities, we can\n        actually make things a lot easier to read, and completely get rid of our\n        helper functions.\n        <br />\n        Our new function may look something like this:\n        <pre>\n          real_num = 10{\"\\n\"}def over_under(guess):{\"\\n\"}\n          {\"    \"}“““over_under is a guessing game that uses user input to\n          generate hints.”””{\"\\n\"}\n          {\"    \"}if guess == real_num:{\"\\n\"}\n          {\"        \"}print(“Yay! You guessed it!”){\"\\n\"}\n          {\"    \"}elif guess &gt; real_num:{\"\\n\"}\n          {\"        \"}print(“Try something lower than that.”){\"\\n\"}\n          {\"    \"}elif guess &lt; real_num:{\"\\n\"}\n          {\"        \"}print(“Try something bigger.”){\"\\n\"}\n        </pre>\n        (See the video for more notes on how this is actually better!)\n        <h3>Now, Why Are Booleans Useful?</h3>\n        Boolean values serve as additional levels of robustness for our code.\n        <br />\n        Booleans make special cases easy to catch, with minimal code.\n        <br />\n        Keeps redundancy away.\n        <br />\n        We don’t have to write functions to explicitly tell Python what is good\n        or bad.\n        <h3>Final Note</h3>\n        If you are ever curious about what something in Python's boolean return\n        value is, you can use the built-in Python{\" \"}\n        <b style={{ color: \"blue\" }}>bool()</b> function with your item as the\n        parameter, and Python will tell you!!\n        <h1>...</h1>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default Lesson5;\n"]},"metadata":{},"sourceType":"module"}