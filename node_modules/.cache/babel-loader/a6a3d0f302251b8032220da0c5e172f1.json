{"ast":null,"code":"import React from\"react\";import PREPLesson from\"./Lesson\";import CodeBlock from\"../../components/CodeBlock\";import{Header}from\"semantic-ui-react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function PREPLesson6(){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(PREPLesson,{header:\"Iterables and the 'For' Loop\",description:\"What are iterables? What are the different types of iterables? Today we will discuss for loops and when to use them instead of while loops.\",slideSrc:\"https://docs.google.com/presentation/d/e/2PACX-1vRjODe7bzL9NYyw9p-EyNZJ6lFu4CV0gzFQS0vjxICy3aeVsvqIc3BsahWS3frP9-SPm_A5qMt_SARL/embed?start=false&loop=false&delayms=3000\",prevLesson:null,nextLesson:\"\",videoSrc:\"https://www.youtube.com/embed/BKh9iRQQDxM\",slideLink:\"https://docs.google.com/presentation/d/1DyzrfbdbxW_4RtJQ1B48QXbIDuxh0fkmVJSJzgY2SBk/edit?usp=sharing\",lessonDownload:\"./prepDownloads/prep_lesson6.zip\",children:[/*#__PURE__*/_jsx(Header,{as:\"h3\",children:\"Practice Problem Solutions:\"}),/*#__PURE__*/_jsx(CodeBlock,{code:\"\\n##############################################\\n######### PRACTICE PROBLEM SOLUTIONS #########\\n##############################################\\n\\n\\ndef first_names_for(lst):\\n    \\\"\\\"\\\"Takes in a list of people, with each person listed as a tuple, and returns\\n    a list of the first names of everyone in the list. The overall format of lst is:\\n    [(first1, last1, age1), (first2, last2, age2) ...]\\n\\n    >>> first_names(first_list)\\n    ['Fairy', 'Prince', 'Princess']\\n    >>> first_names(second_list)\\n    ['Tomas', 'Winnie', 'Oski', 'Mickey']\\n    \\\"\\\"\\\"\\n    firsts = []\\n    for people in lst:\\n        name = people[0]  # access the first element of the i-th item in lst\\n        firsts.append(name)\\n    return firsts\\n\\n\\ndef tup_to_dict_for(lst):\\n    \\\"\\\"\\\"Takes in a list of 2-item tuples and returns a dictionary with the items\\n    as key-value pairs in the format {firstItem: secondItem, ...}\\n\\n    >>> tup_to_dict_for(first_list) \\n    {\\\"Fairy\\\": \\\"Godmother\\\", \\\"Prince\\\": \\\"Charming\\\", \\\"Princess\\\": \\\"Fiona\\\"}\\n    \\\"\\\"\\\"\\n    d = {}\\n    for tup in lst:\\n        first, second = tup[0], tup[1]\\n        d[first] = second\\n    return d\\n\\n    # NOTE THE TEST WILL SAY THIS FAILS, BUT ITS JUST THAT ITS SINGLE QUOTES\\n    # INSTEAD OF DOUBLE QUOTES\\n\\n\\ndef last_names(lst):\\n    \\\"\\\"\\\"Takes in a list of people, with each person listed as a tuple, and returns\\n    a list of the first names of everyone in the list. The overall format of lst is:\\n    [(first1, last1, age1), (first2, last2, age2) ...]\\n\\n    >>> last_names(first_list)\\n    ['Godmother', 'Charming', 'Fiona']\\n    >>> last_names(second_list)\\n    ['The Train', 'The Pooh', 'Bear', 'Mouse']\\n    \\\"\\\"\\\"\\n    firsts = []\\n    for people in lst:\\n        name = people[1]\\n        firsts.append(name)\\n    return firsts\\n\\n\\ndef zip_lists(lst1, lst2):\\n    \\\"\\\"\\\"Takes 2 lists and puts them together as key value pairs of a dictionary.\\n    Dictionary structure should be: {i-th elem of lst1: i-th elem of lst2 ...}\\n\\n    >>> zip_lists([1, 2, 3], [\\\"one\\\", \\\"two\\\", \\\"three\\\"])\\n    {1: 'one', 2: 'two', 3: 'three'}\\n    \\\"\\\"\\\"\\n    if len(lst1) != len(lst2):\\n        return                  # this ensures that we have the same number of elements\\n    d = {}\\n    for i in range(len(lst1)):\\n        item1, item2 = lst1[i], lst2[i]\\n        d[item1] = item2\\n    return d\\n\\n\\ndef unzip_dict(d):\\n    \\\"\\\"\\\"Takes a dictionary and returns its key-value pairs stored as 2-item tuples\\n    within a list. Format of tuples should be (<key>, <value>)\\n\\n    >>> unzip_dict({1: 'one', 2: 'two', 3: 'three'})\\n    [(1, 'one'), (2, 'two'), (3, 'three)]\\n    \\\"\\\"\\\"\\n    lst = []\\n    for key in d.keys():\\n        val = d[key]\\n        tup = tuple((key, val))\\n        lst.append(tup)\\n    return lst\\n\\n\"})]})});}export default PREPLesson6;","map":{"version":3,"sources":["/Users/destul/Desktop/cs-central/src/pages/PREP/PREPLesson6.js"],"names":["React","PREPLesson","CodeBlock","Header","PREPLesson6"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,UAAP,KAAuB,UAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,4BAAtB,CACA,OAASC,MAAT,KAAuB,mBAAvB,C,6IAEA,QAASC,CAAAA,WAAT,EAAuB,CACrB,mBACE,sCACE,MAAC,UAAD,EACE,MAAM,CAAC,8BADT,CAEE,WAAW,CAAC,6IAFd,CAIE,QAAQ,CAAC,2KAJX,CAKE,UAAU,CAAE,IALd,CAME,UAAU,CAAC,EANb,CAOE,QAAQ,CAAC,2CAPX,CAQE,SAAS,uGARX,CASE,cAAc,CAAC,kCATjB,wBAWE,KAAC,MAAD,EAAQ,EAAE,CAAE,IAAZ,yCAXF,cAaE,KAAC,SAAD,EACE,IAAI,yuFADN,EAbF,GADF,EADF,CA4GD,CAED,cAAeA,CAAAA,WAAf","sourcesContent":["import React from \"react\";\n\nimport PREPLesson from \"./Lesson\";\nimport CodeBlock from \"../../components/CodeBlock\";\nimport { Header } from \"semantic-ui-react\";\n\nfunction PREPLesson6() {\n  return (\n    <>\n      <PREPLesson\n        header=\"Iterables and the 'For' Loop\"\n        description=\"What are iterables? What are the different types of iterables? Today we will discuss for loops and when\n          to use them instead of while loops.\"\n        slideSrc=\"https://docs.google.com/presentation/d/e/2PACX-1vRjODe7bzL9NYyw9p-EyNZJ6lFu4CV0gzFQS0vjxICy3aeVsvqIc3BsahWS3frP9-SPm_A5qMt_SARL/embed?start=false&loop=false&delayms=3000\"\n        prevLesson={null}\n        nextLesson=\"\"\n        videoSrc=\"https://www.youtube.com/embed/BKh9iRQQDxM\"\n        slideLink={`https://docs.google.com/presentation/d/1DyzrfbdbxW_4RtJQ1B48QXbIDuxh0fkmVJSJzgY2SBk/edit?usp=sharing`}\n        lessonDownload=\"./prepDownloads/prep_lesson6.zip\"\n      >\n        <Header as={\"h3\"}>Practice Problem Solutions:</Header>\n\n        <CodeBlock\n          code={`\n##############################################\n######### PRACTICE PROBLEM SOLUTIONS #########\n##############################################\n\n\ndef first_names_for(lst):\n    \"\"\"Takes in a list of people, with each person listed as a tuple, and returns\n    a list of the first names of everyone in the list. The overall format of lst is:\n    [(first1, last1, age1), (first2, last2, age2) ...]\n\n    >>> first_names(first_list)\n    ['Fairy', 'Prince', 'Princess']\n    >>> first_names(second_list)\n    ['Tomas', 'Winnie', 'Oski', 'Mickey']\n    \"\"\"\n    firsts = []\n    for people in lst:\n        name = people[0]  # access the first element of the i-th item in lst\n        firsts.append(name)\n    return firsts\n\n\ndef tup_to_dict_for(lst):\n    \"\"\"Takes in a list of 2-item tuples and returns a dictionary with the items\n    as key-value pairs in the format {firstItem: secondItem, ...}\n\n    >>> tup_to_dict_for(first_list) \n    {\"Fairy\": \"Godmother\", \"Prince\": \"Charming\", \"Princess\": \"Fiona\"}\n    \"\"\"\n    d = {}\n    for tup in lst:\n        first, second = tup[0], tup[1]\n        d[first] = second\n    return d\n\n    # NOTE THE TEST WILL SAY THIS FAILS, BUT ITS JUST THAT ITS SINGLE QUOTES\n    # INSTEAD OF DOUBLE QUOTES\n\n\ndef last_names(lst):\n    \"\"\"Takes in a list of people, with each person listed as a tuple, and returns\n    a list of the first names of everyone in the list. The overall format of lst is:\n    [(first1, last1, age1), (first2, last2, age2) ...]\n\n    >>> last_names(first_list)\n    ['Godmother', 'Charming', 'Fiona']\n    >>> last_names(second_list)\n    ['The Train', 'The Pooh', 'Bear', 'Mouse']\n    \"\"\"\n    firsts = []\n    for people in lst:\n        name = people[1]\n        firsts.append(name)\n    return firsts\n\n\ndef zip_lists(lst1, lst2):\n    \"\"\"Takes 2 lists and puts them together as key value pairs of a dictionary.\n    Dictionary structure should be: {i-th elem of lst1: i-th elem of lst2 ...}\n\n    >>> zip_lists([1, 2, 3], [\"one\", \"two\", \"three\"])\n    {1: 'one', 2: 'two', 3: 'three'}\n    \"\"\"\n    if len(lst1) != len(lst2):\n        return                  # this ensures that we have the same number of elements\n    d = {}\n    for i in range(len(lst1)):\n        item1, item2 = lst1[i], lst2[i]\n        d[item1] = item2\n    return d\n\n\ndef unzip_dict(d):\n    \"\"\"Takes a dictionary and returns its key-value pairs stored as 2-item tuples\n    within a list. Format of tuples should be (<key>, <value>)\n\n    >>> unzip_dict({1: 'one', 2: 'two', 3: 'three'})\n    [(1, 'one'), (2, 'two'), (3, 'three)]\n    \"\"\"\n    lst = []\n    for key in d.keys():\n        val = d[key]\n        tup = tuple((key, val))\n        lst.append(tup)\n    return lst\n\n`}\n        />\n      </PREPLesson>\n    </>\n  );\n}\n\nexport default PREPLesson6;\n"]},"metadata":{},"sourceType":"module"}