{"ast":null,"code":"import React from\"react\";import PREPLesson from\"./Lesson\";import CodeBlock from\"../../components/CodeBlock\";import{jsx as _jsx}from\"react/jsx-runtime\";function PREPLesson7(){return/*#__PURE__*/_jsx(PREPLesson,{header:\"Higher-Order Functions\",description:\"Today's lesson focuses on Higher Order Functions (or HOFs for short)! These are functions that either return another function or pass in a function as a parameter. After some examples we discuss their practical uses.\",slideSrc:\"https://docs.google.com/presentation/d/e/2PACX-1vQtqn14Q2srW5C5hGVJpqTq6oSota1izvQ65nd0C4cKw69yikqc55Qoxy1_GEbxQG2W7hyiAvQ5O2Rk/embed?start=false&loop=false&delayms=3000\",prevLesson:null,nextLesson:\"\",slideLink:\"https://docs.google.com/presentation/d/1-goU-UOy7GQaGVfITzajwlgCCS4LXB8iN_lcFM9Q-xY/edit?usp=sharing\",children:/*#__PURE__*/_jsx(CodeBlock,{code:\"\\ndef iter_calc(fn):\\n    \\\"\\\"\\\"Write a reusable HOF that first takes in a built in method, FN, that uses\\n    two arguments, and then a numerical index. Perform calls to FN with \\n    successive digts from 1 up to the specified index. USE HOF's.\\n\\n    >>> iter_calc(add)(5) # 1 + 2 + 3 + 4 + 5\\n    15\\n    >>> iter_calc(pow)(4) # 1 ** 2 ** 3 ** 4\\n    1\\n    >>> iter_calc(mul)(5) # 1 * 2 * 3 * 4 * 5 --> this is reverse factorial\\n    120\\n    \\\"\\\"\\\"\\n    def calc(n):\\n        so_far = 1            # every operation starts off with 1\\n        for i in range(2, n + 1):\\n            so_far = fn(so_far, i)\\n        return so_far\\n    return calc\\n\\n\\ndef find_item(lst, item):\\n    \\\"\\\"\\\"Write a function that first takes in a list of tuples, and a specified key. \\n    Without assigning any variables or using any loops, iterate through all the tuples \\n    and return a list with those that contain the specified value.\\n\\n    >>> find_item([(True, 17), (\\\"Hello\\\", 21, False), (17 , \\\"GO BEARS\\\")], 17)\\n    [(True, 17), (17, 'GO BEARS')]\\n    >>> find_item([(21, 3, 18), (True, False), (True, True, 18), (13, False)], True)\\n    [(True, False), (True, True, 18)]\\n    \\\"\\\"\\\"\\n    def finder(index, rv):\\n        if index >= len(lst):\\n            # at the end of the lst\\n            return rv\\n        elif item in lst[index]:\\n            # item is present in the current tuple\\n            rv.append(lst[index])\\n            return finder(index + 1, rv)\\n        else:\\n            # item not in tuple, and not at the end of lst. move onto next tuple.\\n            return finder(index + 1, rv)\\n    return finder(0, [])\\n          \"})});}export default PREPLesson7;","map":{"version":3,"sources":["/Users/destul/Desktop/cs-central/src/pages/PREP/PREPLesson7.js"],"names":["React","PREPLesson","CodeBlock","PREPLesson7"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,UAAP,KAAuB,UAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,4BAAtB,C,2CAEA,QAASC,CAAAA,WAAT,EAAuB,CACrB,mBACE,KAAC,UAAD,EACE,MAAM,CAAC,wBADT,CAEE,WAAW,CAAC,0NAFd,CAIE,QAAQ,4KAJV,CAKE,UAAU,CAAE,IALd,CAME,UAAU,CAAC,EANb,CAOE,SAAS,uGAPX,uBASE,KAAC,SAAD,EACE,IAAI,8mDADN,EATF,EADF,CA0DD,CAED,cAAeA,CAAAA,WAAf","sourcesContent":["import React from \"react\";\n\nimport PREPLesson from \"./Lesson\";\nimport CodeBlock from \"../../components/CodeBlock\";\n\nfunction PREPLesson7() {\n  return (\n    <PREPLesson\n      header=\"Higher-Order Functions\"\n      description=\"Today's lesson focuses on Higher Order Functions (or HOFs for short)! These are functions that\n          either return another function or pass in a function as a parameter. After some examples we discuss their practical uses.\"\n      slideSrc={`https://docs.google.com/presentation/d/e/2PACX-1vQtqn14Q2srW5C5hGVJpqTq6oSota1izvQ65nd0C4cKw69yikqc55Qoxy1_GEbxQG2W7hyiAvQ5O2Rk/embed?start=false&loop=false&delayms=3000`}\n      prevLesson={null}\n      nextLesson=\"\"\n      slideLink={`https://docs.google.com/presentation/d/1-goU-UOy7GQaGVfITzajwlgCCS4LXB8iN_lcFM9Q-xY/edit?usp=sharing`}\n    >\n      <CodeBlock\n        code={`\ndef iter_calc(fn):\n    \"\"\"Write a reusable HOF that first takes in a built in method, FN, that uses\n    two arguments, and then a numerical index. Perform calls to FN with \n    successive digts from 1 up to the specified index. USE HOF's.\n\n    >>> iter_calc(add)(5) # 1 + 2 + 3 + 4 + 5\n    15\n    >>> iter_calc(pow)(4) # 1 ** 2 ** 3 ** 4\n    1\n    >>> iter_calc(mul)(5) # 1 * 2 * 3 * 4 * 5 --> this is reverse factorial\n    120\n    \"\"\"\n    def calc(n):\n        so_far = 1            # every operation starts off with 1\n        for i in range(2, n + 1):\n            so_far = fn(so_far, i)\n        return so_far\n    return calc\n\n\ndef find_item(lst, item):\n    \"\"\"Write a function that first takes in a list of tuples, and a specified key. \n    Without assigning any variables or using any loops, iterate through all the tuples \n    and return a list with those that contain the specified value.\n\n    >>> find_item([(True, 17), (\"Hello\", 21, False), (17 , \"GO BEARS\")], 17)\n    [(True, 17), (17, 'GO BEARS')]\n    >>> find_item([(21, 3, 18), (True, False), (True, True, 18), (13, False)], True)\n    [(True, False), (True, True, 18)]\n    \"\"\"\n    def finder(index, rv):\n        if index >= len(lst):\n            # at the end of the lst\n            return rv\n        elif item in lst[index]:\n            # item is present in the current tuple\n            rv.append(lst[index])\n            return finder(index + 1, rv)\n        else:\n            # item not in tuple, and not at the end of lst. move onto next tuple.\n            return finder(index + 1, rv)\n    return finder(0, [])\n          `}\n      />\n    </PREPLesson>\n  );\n}\n\nexport default PREPLesson7;\n"]},"metadata":{},"sourceType":"module"}