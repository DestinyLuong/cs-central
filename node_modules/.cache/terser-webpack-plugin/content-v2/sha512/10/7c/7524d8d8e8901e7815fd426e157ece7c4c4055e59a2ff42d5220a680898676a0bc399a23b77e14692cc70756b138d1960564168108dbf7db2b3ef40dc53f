{"code":"(this[\"webpackJsonpcs-central\"]=this[\"webpackJsonpcs-central\"]||[]).push([[67],{463:function(t,n,e){\"use strict\";function a(t){!function(t){var n=t.util.clone(t.languages.javascript);t.languages.jsx=t.languages.extend(\"markup\",n),t.languages.jsx.tag.pattern=/<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i,t.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/i,t.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i,t.languages.jsx.tag.inside.tag.inside[\"class-name\"]=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/,t.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:/\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,inside:{punctuation:/\\.{3}|[{}.]/,\"attr-value\":/\\w+/}}},t.languages.jsx.tag),t.languages.insertBefore(\"inside\",\"attr-value\",{script:{pattern:/=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,inside:{\"script-punctuation\":{pattern:/^=(?={)/,alias:\"punctuation\"},rest:t.languages.jsx},alias:\"language-javascript\"}},t.languages.jsx.tag);var e=function t(n){return n?\"string\"===typeof n?n:\"string\"===typeof n.content?n.content:n.content.map(t).join(\"\"):\"\"},a=function n(a){for(var s=[],g=0;g<a.length;g++){var i=a[g],o=!1;if(\"string\"!==typeof i&&(\"tag\"===i.type&&i.content[0]&&\"tag\"===i.content[0].type?\"</\"===i.content[0].content[0].content?s.length>0&&s[s.length-1].tagName===e(i.content[0].content[1])&&s.pop():\"/>\"===i.content[i.content.length-1].content||s.push({tagName:e(i.content[0].content[1]),openedBraces:0}):s.length>0&&\"punctuation\"===i.type&&\"{\"===i.content?s[s.length-1].openedBraces++:s.length>0&&s[s.length-1].openedBraces>0&&\"punctuation\"===i.type&&\"}\"===i.content?s[s.length-1].openedBraces--:o=!0),(o||\"string\"===typeof i)&&s.length>0&&0===s[s.length-1].openedBraces){var c=e(i);g<a.length-1&&(\"string\"===typeof a[g+1]||\"plain-text\"===a[g+1].type)&&(c+=e(a[g+1]),a.splice(g+1,1)),g>0&&(\"string\"===typeof a[g-1]||\"plain-text\"===a[g-1].type)&&(c=e(a[g-1])+c,a.splice(g-1,1),g--),a[g]=new t.Token(\"plain-text\",c,null,c)}i.content&&\"string\"!==typeof i.content&&n(i.content)}};t.hooks.add(\"after-tokenize\",(function(t){\"jsx\"!==t.language&&\"tsx\"!==t.language||a(t.tokens)}))}(t)}t.exports=a,a.displayName=\"jsx\",a.aliases=[]}}]);","name":"static/js/react-syntax-highlighter_languages_refractor_jsx.dfbd6627.chunk.js","map":{"version":3,"sources":["static/js/react-syntax-highlighter_languages_refractor_jsx.dfbd6627.chunk.js"],"names":["this","push","463","module","exports","__webpack_require__","jsx","Prism","javascript","util","clone","languages","extend","tag","pattern","inside","insertBefore","spread","punctuation","attr-value","script","script-punctuation","alias","rest","stringifyToken","token","content","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","openedBraces","plainText","splice","Token","hooks","add","env","language","displayName","aliases"],"mappings":"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"},"input":"(this[\"webpackJsonpcs-central\"] = this[\"webpackJsonpcs-central\"] || []).push([[67],{\n\n/***/ 463:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = jsx;\njsx.displayName = 'jsx';\njsx.aliases = [];\n\nfunction jsx(Prism) {\n  ;\n\n  (function (Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript);\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n    Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n    Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;\n    Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n    Prism.languages.insertBefore('inside', 'attr-name', {\n      spread: {\n        pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n        inside: {\n          punctuation: /\\.{3}|[{}.]/,\n          'attr-value': /\\w+/\n        }\n      }\n    }, Prism.languages.jsx.tag);\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      script: {\n        // Allow for two levels of nesting\n        pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n        inside: {\n          'script-punctuation': {\n            pattern: /^=(?={)/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.jsx\n        },\n        alias: 'language-javascript'\n      }\n    }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n    var stringifyToken = function stringifyToken(token) {\n      if (!token) {\n        return '';\n      }\n\n      if (typeof token === 'string') {\n        return token;\n      }\n\n      if (typeof token.content === 'string') {\n        return token.content;\n      }\n\n      return token.content.map(stringifyToken).join('');\n    };\n\n    var walkTokens = function walkTokens(tokens) {\n      var openedTags = [];\n\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        var notTagNorBrace = false;\n\n        if (typeof token !== 'string') {\n          if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n                // Pop matching opening tag\n                openedTags.pop();\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {// Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                });\n              }\n            }\n          } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n            // Here we might have entered a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces++;\n          } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n            // Here we might have left a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces--;\n          } else {\n            notTagNorBrace = true;\n          }\n        }\n\n        if (notTagNorBrace || typeof token === 'string') {\n          if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n            // Here we are inside a tag, and not inside a JSX context.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token); // And merge text with adjacent text\n\n            if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n              plainText += stringifyToken(tokens[i + 1]);\n              tokens.splice(i + 1, 1);\n            }\n\n            if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText;\n              tokens.splice(i - 1, 1);\n              i--;\n            }\n\n            tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n          }\n        }\n\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content);\n        }\n      }\n    };\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\n        return;\n      }\n\n      walkTokens(env.tokens);\n    });\n  })(Prism);\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/destul/Desktop/cs-central/node_modules/refractor/lang/jsx.js"],"names":["module","exports","jsx","displayName","aliases","Prism","javascript","util","clone","languages","extend","tag","pattern","inside","insertBefore","spread","punctuation","script","alias","rest","stringifyToken","token","content","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","Token","hooks","add","env","language"],"mappings":"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","file":"x","sourcesContent":["'use strict'\n\nmodule.exports = jsx\njsx.displayName = 'jsx'\njsx.aliases = []\nfunction jsx(Prism) {\n  ;(function(Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript)\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript)\n    Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i\n    Prism.languages.jsx.tag.inside[\n      'attr-value'\n    ].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i\n    Prism.languages.jsx.tag.inside['tag'].inside[\n      'class-name'\n    ] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-name',\n      {\n        spread: {\n          pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n          inside: {\n            punctuation: /\\.{3}|[{}.]/,\n            'attr-value': /\\w+/\n          }\n        }\n      },\n      Prism.languages.jsx.tag\n    )\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-value',\n      {\n        script: {\n          // Allow for two levels of nesting\n          pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n          inside: {\n            'script-punctuation': {\n              pattern: /^=(?={)/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.jsx\n          },\n          alias: 'language-javascript'\n        }\n      },\n      Prism.languages.jsx.tag\n    ) // The following will handle plain text inside tags\n    var stringifyToken = function(token) {\n      if (!token) {\n        return ''\n      }\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function(tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{'\n          ) {\n            // Here we might have entered a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside a JSX context.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            tokens[i] = new Prism.Token(\n              'plain-text',\n              plainText,\n              null,\n              plainText\n            )\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n"]}}