{"code":"(this[\"webpackJsonpcs-central\"]=this[\"webpackJsonpcs-central\"]||[]).push([[119],{599:function(t,a,o){\"use strict\";function n(t){t.languages.roboconf={comment:/#.*/,keyword:{pattern:/(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,lookbehind:!0},component:{pattern:/[\\w-]+(?=[ \\t]*\\{)/,alias:\"variable\"},property:/[\\w.-]+(?=[ \\t]*:)/,value:{pattern:/(=[ \\t]*)[^,;]+/,lookbehind:!0,alias:\"attr-value\"},optional:{pattern:/\\(optional\\)/,alias:\"builtin\"},wildcard:{pattern:/(\\.)\\*/,lookbehind:!0,alias:\"operator\"},punctuation:/[{},.;:=]/}}t.exports=n,n.displayName=\"roboconf\",n.aliases=[]}}]);","name":"static/js/react-syntax-highlighter_languages_refractor_roboconf.23432e16.chunk.js","map":{"version":3,"sources":["static/js/react-syntax-highlighter_languages_refractor_roboconf.23432e16.chunk.js"],"names":["this","push","599","module","exports","__webpack_require__","roboconf","Prism","languages","comment","keyword","pattern","lookbehind","component","alias","property","value","optional","wildcard","punctuation","displayName","aliases"],"mappings":"CAACA,KAAK,0BAA4BA,KAAK,2BAA6B,IAAIC,KAAK,CAAC,CAAC,KAAK,CAE9EC,IACA,SAAUC,EAAQC,EAASC,GAEjC,aAOA,SAASC,EAASC,GAChBA,EAAMC,UAAUF,SAAW,CACzBG,QAAS,MACTC,QAAS,CACPC,QAAS,gFACTC,YAAY,GAEdC,UAAW,CACTF,QAAS,qBACTG,MAAO,YAETC,SAAU,qBACVC,MAAO,CACLL,QAAS,kBACTC,YAAY,EACZE,MAAO,cAETG,SAAU,CACRN,QAAS,eACTG,MAAO,WAETI,SAAU,CACRP,QAAS,SACTC,YAAY,EACZE,MAAO,YAETK,YAAa,aA9BjBhB,EAAOC,QAAUE,EACjBA,EAASc,YAAc,WACvBd,EAASe,QAAU"},"input":"(this[\"webpackJsonpcs-central\"] = this[\"webpackJsonpcs-central\"] || []).push([[119],{\n\n/***/ 599:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = roboconf;\nroboconf.displayName = 'roboconf';\nroboconf.aliases = [];\n\nfunction roboconf(Prism) {\n  Prism.languages.roboconf = {\n    comment: /#.*/,\n    keyword: {\n      pattern: /(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,\n      lookbehind: true\n    },\n    component: {\n      pattern: /[\\w-]+(?=[ \\t]*\\{)/,\n      alias: 'variable'\n    },\n    property: /[\\w.-]+(?=[ \\t]*:)/,\n    value: {\n      pattern: /(=[ \\t]*)[^,;]+/,\n      lookbehind: true,\n      alias: 'attr-value'\n    },\n    optional: {\n      pattern: /\\(optional\\)/,\n      alias: 'builtin'\n    },\n    wildcard: {\n      pattern: /(\\.)\\*/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    punctuation: /[{},.;:=]/\n  };\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/destul/Desktop/cs-central/node_modules/refractor/lang/roboconf.js"],"names":["module","exports","roboconf","displayName","aliases","Prism","languages","comment","keyword","pattern","lookbehind","component","alias","property","value","optional","wildcard","punctuation"],"mappings":";;;;;;AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AACAA,QAAQ,CAACC,WAAT,GAAuB,UAAvB;AACAD,QAAQ,CAACE,OAAT,GAAmB,EAAnB;;AACA,SAASF,QAAT,CAAkBG,KAAlB,EAAyB;AACvBA,OAAK,CAACC,SAAN,CAAgBJ,QAAhB,GAA2B;AACzBK,WAAO,EAAE,KADgB;AAEzBC,WAAO,EAAE;AACPC,aAAO,EAAE,+EADF;AAEPC,gBAAU,EAAE;AAFL,KAFgB;AAMzBC,aAAS,EAAE;AACTF,aAAO,EAAE,oBADA;AAETG,WAAK,EAAE;AAFE,KANc;AAUzBC,YAAQ,EAAE,oBAVe;AAWzBC,SAAK,EAAE;AACLL,aAAO,EAAE,iBADJ;AAELC,gBAAU,EAAE,IAFP;AAGLE,WAAK,EAAE;AAHF,KAXkB;AAgBzBG,YAAQ,EAAE;AACRN,aAAO,EAAE,cADD;AAERG,WAAK,EAAE;AAFC,KAhBe;AAoBzBI,YAAQ,EAAE;AACRP,aAAO,EAAE,QADD;AAERC,gBAAU,EAAE,IAFJ;AAGRE,WAAK,EAAE;AAHC,KApBe;AAyBzBK,eAAW,EAAE;AAzBY,GAA3B;AA2BD,C","file":"x","sourcesContent":["'use strict'\n\nmodule.exports = roboconf\nroboconf.displayName = 'roboconf'\nroboconf.aliases = []\nfunction roboconf(Prism) {\n  Prism.languages.roboconf = {\n    comment: /#.*/,\n    keyword: {\n      pattern: /(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,\n      lookbehind: true\n    },\n    component: {\n      pattern: /[\\w-]+(?=[ \\t]*\\{)/,\n      alias: 'variable'\n    },\n    property: /[\\w.-]+(?=[ \\t]*:)/,\n    value: {\n      pattern: /(=[ \\t]*)[^,;]+/,\n      lookbehind: true,\n      alias: 'attr-value'\n    },\n    optional: {\n      pattern: /\\(optional\\)/,\n      alias: 'builtin'\n    },\n    wildcard: {\n      pattern: /(\\.)\\*/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    punctuation: /[{},.;:=]/\n  }\n}\n"]}}