{"code":"(this[\"webpackJsonpcs-central\"]=this[\"webpackJsonpcs-central\"]||[]).push([[79],{562:function(e,n,t){\"use strict\";function a(e){!function(e){var n=/(?:\\\\.|[^\\\\\\n\\r]|(?:\\r?\\n|\\r)(?!\\r?\\n|\\r))/.source;function t(e,t){return e=e.replace(/<inner>/g,n),t&&(e=e+\"|\"+e.replace(/_/g,\"\\\\*\")),RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source+\"(?:\"+e+\")\")}var a=/(?:\\\\.|``.+?``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source,i=/\\|?__(?:\\|__)+\\|?(?:(?:\\r?\\n|\\r)|$)/.source.replace(/__/g,a),r=/\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\r?\\n|\\r)/.source;e.languages.markdown=e.languages.extend(\"markup\",{}),e.languages.insertBefore(\"markdown\",\"prolog\",{blockquote:{pattern:/^>(?:[\\t ]*>)*/m,alias:\"punctuation\"},table:{pattern:RegExp(\"^\"+i+r+\"(?:\"+i+\")*\",\"m\"),inside:{\"table-data-rows\":{pattern:RegExp(\"^(\"+i+r+\")(?:\"+i+\")*$\"),lookbehind:!0,inside:{\"table-data\":{pattern:RegExp(a),inside:e.languages.markdown},punctuation:/\\|/}},\"table-line\":{pattern:RegExp(\"^(\"+i+\")\"+r+\"$\"),lookbehind:!0,inside:{punctuation:/\\||:?-{3,}:?/}},\"table-header-row\":{pattern:RegExp(\"^\"+i+\"$\"),inside:{\"table-header\":{pattern:RegExp(a),alias:\"important\",inside:e.languages.markdown},punctuation:/\\|/}}}},code:[{pattern:/(^[ \\t]*(?:\\r?\\n|\\r))(?: {4}|\\t).+(?:(?:\\r?\\n|\\r)(?: {4}|\\t).+)*/m,lookbehind:!0,alias:\"keyword\"},{pattern:/``.+?``|`[^`\\r\\n]+`/,alias:\"keyword\"},{pattern:/^```[\\s\\S]*?^```$/m,greedy:!0,inside:{\"code-block\":{pattern:/^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,lookbehind:!0},\"code-language\":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\\S.*(?:\\r?\\n|\\r)(?:==+|--+)(?=[ \\t]*$)/m,alias:\"important\",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\\s*)#+.+/m,lookbehind:!0,alias:\"important\",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,lookbehind:!0,alias:\"punctuation\"},list:{pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,lookbehind:!0,alias:\"punctuation\"},\"url-reference\":{pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,inside:{variable:{pattern:/^(!?\\[)[^\\]]+/,lookbehind:!0},string:/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,punctuation:/^[\\[\\]!:]|[<>]/},alias:\"url\"},bold:{pattern:t(/__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source,!0),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\\s\\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\\*\\*|__/}},italic:{pattern:t(/_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source,!0),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\\s\\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:t(/(~~?)(?:(?!~)<inner>)+?\\2/.source,!1),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\\s\\S]+(?=\\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},url:{pattern:t(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/.source,!1),lookbehind:!0,greedy:!0,inside:{variable:{pattern:/(\\[)[^\\]]+(?=\\]$)/,lookbehind:!0},content:{pattern:/(^!?\\[)[^\\]]+(?=\\])/,lookbehind:!0,inside:{}},string:{pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/}}}}),[\"url\",\"bold\",\"italic\",\"strike\"].forEach((function(n){[\"url\",\"bold\",\"italic\",\"strike\"].forEach((function(t){n!==t&&(e.languages.markdown[n].inside.content.inside[t]=e.languages.markdown[t])}))})),e.hooks.add(\"after-tokenize\",(function(e){\"markdown\"!==e.language&&\"md\"!==e.language||function e(n){if(n&&\"string\"!==typeof n)for(var t=0,a=n.length;t<a;t++){var i=n[t];if(\"code\"===i.type){var r=i.content[1],o=i.content[3];if(r&&o&&\"code-language\"===r.type&&\"code-block\"===o.type&&\"string\"===typeof r.content){var s=\"language-\"+r.content.trim().split(/\\s+/)[0].toLowerCase();o.alias?\"string\"===typeof o.alias?o.alias=[o.alias,s]:o.alias.push(s):o.alias=[s]}}else e(i.content)}}(e.tokens)})),e.hooks.add(\"wrap\",(function(n){if(\"code-block\"===n.type){for(var t=\"\",a=0,i=n.classes.length;a<i;a++){var r=n.classes[a],o=/language-(.+)/.exec(r);if(o){t=o[1];break}}var s=e.languages[t];if(s){var l=n.content.value.replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\");n.content=e.highlight(l,s,t)}else if(t&&\"none\"!==t&&e.plugins.autoloader){var d=\"md-\"+(new Date).valueOf()+\"-\"+Math.floor(1e16*Math.random());n.attributes.id=d,e.plugins.autoloader.loadLanguages(t,(function(){var n=document.getElementById(d);n&&(n.innerHTML=e.highlight(n.textContent,e.languages[t],t))}))}}})),e.languages.md=e.languages.markdown}(e)}e.exports=a,a.displayName=\"markdown\",a.aliases=[\"md\"]}}]);","name":"static/js/react-syntax-highlighter_languages_refractor_markdown.71620c57.chunk.js","map":{"version":3,"sources":["static/js/react-syntax-highlighter_languages_refractor_markdown.71620c57.chunk.js"],"names":["this","push","562","module","exports","__webpack_require__","markdown","Prism","inner","source","createInline","pattern","starAlternative","replace","RegExp","tableCell","tableRow","tableLine","languages","extend","insertBefore","blockquote","alias","table","inside","table-data-rows","lookbehind","table-data","punctuation","table-line","table-header-row","table-header","code","greedy","code-block","code-language","title","hr","list","url-reference","variable","string","bold","content","italic","strike","url","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","trim","split","toLowerCase","classes","cls","match","exec","grammar","value","highlight","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","textContent","md","displayName","aliases"],"mappings":"CAACA,KAAK,0BAA4BA,KAAK,2BAA6B,IAAIC,KAAK,CAAC,CAAC,IAAI,CAE7EC,IACA,SAAUC,EAAQC,EAASC,GAEjC,aAOA,SAASC,EAASC,IAGhB,SAAWA,GAET,IAAIC,EAAQ,6CAA6CC,OAazD,SAASC,EAAaC,EAASC,GAO7B,OANAD,EAAUA,EAAQE,QAAQ,WAAYL,GAElCI,IACFD,EAAUA,EAAU,IAAMA,EAAQE,QAAQ,KAAM,QAG3CC,OAAO,0BAA0BL,OAAS,MAAQE,EAAU,KAGrE,IAAII,EAAY,2CAA2CN,OACvDO,EAAW,sCAAsCP,OAAOI,QAAQ,MAAOE,GACvEE,EAAY,sEAAsER,OACtFF,EAAMW,UAAUZ,SAAWC,EAAMW,UAAUC,OAAO,SAAU,IAC5DZ,EAAMW,UAAUE,aAAa,WAAY,SAAU,CACjDC,WAAY,CAEVV,QAAS,kBACTW,MAAO,eAETC,MAAO,CACLZ,QAASG,OAAO,IAAME,EAAWC,EAAY,MAAQD,EAAW,KAAM,KACtEQ,OAAQ,CACNC,kBAAmB,CACjBd,QAASG,OAAO,KAAOE,EAAWC,EAAY,OAASD,EAAW,OAClEU,YAAY,EACZF,OAAQ,CACNG,aAAc,CACZhB,QAASG,OAAOC,GAChBS,OAAQjB,EAAMW,UAAUZ,UAE1BsB,YAAa,OAGjBC,aAAc,CACZlB,QAASG,OAAO,KAAOE,EAAW,IAAMC,EAAY,KACpDS,YAAY,EACZF,OAAQ,CACNI,YAAa,iBAGjBE,mBAAoB,CAClBnB,QAASG,OAAO,IAAME,EAAW,KACjCQ,OAAQ,CACNO,eAAgB,CACdpB,QAASG,OAAOC,GAChBO,MAAO,YACPE,OAAQjB,EAAMW,UAAUZ,UAE1BsB,YAAa,SAKrBI,KAAM,CAAC,CAELrB,QAAS,oEACTe,YAAY,EACZJ,MAAO,WACN,CAGDX,QAAS,sBACTW,MAAO,WACN,CAIDX,QAAS,qBACTsB,QAAQ,EACRT,OAAQ,CACNU,aAAc,CACZvB,QAAS,qDACTe,YAAY,GAEdS,gBAAiB,CACfxB,QAAS,WACTe,YAAY,GAEdE,YAAa,SAGjBQ,MAAO,CAAC,CAKNzB,QAAS,0CACTW,MAAO,YACPE,OAAQ,CACNI,YAAa,cAEd,CAGDjB,QAAS,cACTe,YAAY,EACZJ,MAAO,YACPE,OAAQ,CACNI,YAAa,aAGjBS,GAAI,CAKF1B,QAAS,wCACTe,YAAY,EACZJ,MAAO,eAETgB,KAAM,CAKJ3B,QAAS,mCACTe,YAAY,EACZJ,MAAO,eAETiB,gBAAiB,CAKf5B,QAAS,qHACTa,OAAQ,CACNgB,SAAU,CACR7B,QAAS,gBACTe,YAAY,GAEde,OAAQ,+DACRb,YAAa,kBAEfN,MAAO,OAEToB,KAAM,CAIJ/B,QAASD,EAAa,4CAA4CD,QAAQ,GAC1EiB,YAAY,EACZO,QAAQ,EACRT,OAAQ,CACNmB,QAAS,CACPhC,QAAS,sBACTe,YAAY,EACZF,OAAQ,IAGVI,YAAa,YAGjBgB,OAAQ,CAINjC,QAASD,EAAa,4CAA4CD,QAAQ,GAC1EiB,YAAY,EACZO,QAAQ,EACRT,OAAQ,CACNmB,QAAS,CACPhC,QAAS,oBACTe,YAAY,EACZF,OAAQ,IAGVI,YAAa,SAGjBiB,OAAQ,CAGNlC,QAASD,EAAa,4BAA4BD,QAAQ,GAC1DiB,YAAY,EACZO,QAAQ,EACRT,OAAQ,CACNmB,QAAS,CACPhC,QAAS,uBACTe,YAAY,EACZF,OAAQ,IAGVI,YAAa,QAGjBkB,IAAK,CAIHnC,QAASD,EAAa,+FAA+FD,QAAQ,GAC7HiB,YAAY,EACZO,QAAQ,EACRT,OAAQ,CACNgB,SAAU,CACR7B,QAAS,oBACTe,YAAY,GAEdiB,QAAS,CACPhC,QAAS,sBACTe,YAAY,EACZF,OAAQ,IAGViB,OAAQ,CACN9B,QAAS,gCAKjB,CAAC,MAAO,OAAQ,SAAU,UAAUoC,SAAQ,SAAUC,GAEpD,CAAC,MAAO,OAAQ,SAAU,UAAUD,SAAQ,SAAUvB,GAChDwB,IAAUxB,IACZjB,EAAMW,UAAUZ,SAAS0C,GAAOxB,OAAOmB,QAAQnB,OAAOA,GAAUjB,EAAMW,UAAUZ,SAASkB,UAI/FjB,EAAM0C,MAAMC,IAAI,kBAAkB,SAAUC,GACrB,aAAjBA,EAAIC,UAA4C,OAAjBD,EAAIC,UAIvC,SAASC,EAAWC,GAClB,GAAKA,GAA4B,kBAAXA,EAItB,IAAK,IAAIC,EAAI,EAAGC,EAAIF,EAAOG,OAAQF,EAAIC,EAAGD,IAAK,CAC7C,IAAIP,EAAQM,EAAOC,GAEnB,GAAmB,SAAfP,EAAMU,KAAV,CAmBA,IAAIC,EAAWX,EAAML,QAAQ,GACzBiB,EAAYZ,EAAML,QAAQ,GAE9B,GAAIgB,GAAYC,GAA+B,kBAAlBD,EAASD,MAA+C,eAAnBE,EAAUF,MAAqD,kBAArBC,EAAShB,QAAsB,CAEzI,IAAIrB,EAAQ,YAAcqC,EAAShB,QAAQkB,OAAOC,MAAM,OAAO,GAAGC,cAE7DH,EAAUtC,MAEuB,kBAApBsC,EAAUtC,MAC1BsC,EAAUtC,MAAQ,CAACsC,EAAUtC,MAAOA,GAEpCsC,EAAUtC,MAAMrB,KAAKqB,GAJrBsC,EAAUtC,MAAQ,CAACA,SA1BrB+B,EAAWL,EAAML,UAoCvBU,CAAWF,EAAIG,WAEjB/C,EAAM0C,MAAMC,IAAI,QAAQ,SAAUC,GAChC,GAAiB,eAAbA,EAAIO,KAAR,CAMA,IAFA,IAAIC,EAAW,GAENJ,EAAI,EAAGC,EAAIL,EAAIa,QAAQP,OAAQF,EAAIC,EAAGD,IAAK,CAClD,IAAIU,EAAMd,EAAIa,QAAQT,GAClBW,EAAQ,gBAAgBC,KAAKF,GAEjC,GAAIC,EAAO,CACTP,EAAWO,EAAM,GACjB,OAIJ,IAAIE,EAAU7D,EAAMW,UAAUyC,GAE9B,GAAKS,EAYE,CAEL,IAAIpC,EAAOmB,EAAIR,QAAQ0B,MAAMxD,QAAQ,QAAS,KAAKA,QAAQ,SAAU,KACrEsC,EAAIR,QAAUpC,EAAM+D,UAAUtC,EAAMoC,EAAST,QAd7C,GAAIA,GAAyB,SAAbA,GAAuBpD,EAAMgE,QAAQC,WAAY,CAC/D,IAAIC,EAAK,OAAQ,IAAIC,MAAOC,UAAY,IAAMC,KAAKC,MAAsB,KAAhBD,KAAKE,UAC9D3B,EAAI4B,WAAe,GAAIN,EACvBlE,EAAMgE,QAAQC,WAAWQ,cAAcrB,GAAU,WAC/C,IAAIsB,EAAMC,SAASC,eAAeV,GAE9BQ,IACFA,EAAIG,UAAY7E,EAAM+D,UAAUW,EAAII,YAAa9E,EAAMW,UAAUyC,GAAWA,YAUtFpD,EAAMW,UAAUoE,GAAK/E,EAAMW,UAAUZ,SAlUvC,CAmUGC,GA1ULJ,EAAOC,QAAUE,EACjBA,EAASiF,YAAc,WACvBjF,EAASkF,QAAU,CAAC"},"input":"(this[\"webpackJsonpcs-central\"] = this[\"webpackJsonpcs-central\"] || []).push([[79],{\n\n/***/ 562:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = markdown;\nmarkdown.displayName = 'markdown';\nmarkdown.aliases = ['md'];\n\nfunction markdown(Prism) {\n  ;\n\n  (function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\r?\\n|\\r)(?!\\r?\\n|\\r))/.source;\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.\n     * @returns {RegExp}\n     */\n\n    function createInline(pattern, starAlternative) {\n      pattern = pattern.replace(/<inner>/g, inner);\n\n      if (starAlternative) {\n        pattern = pattern + '|' + pattern.replace(/_/g, '\\\\*');\n      }\n\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n    }\n\n    var tableCell = /(?:\\\\.|``.+?``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\r?\\n|\\r)|$)/.source.replace(/__/g, tableCell);\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\r?\\n|\\r)/.source;\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [{\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n        pattern: /(^[ \\t]*(?:\\r?\\n|\\r))(?: {4}|\\t).+(?:(?:\\r?\\n|\\r)(?: {4}|\\t).+)*/m,\n        lookbehind: true,\n        alias: 'keyword'\n      }, {\n        // `code`\n        // ``code``\n        pattern: /``.+?``|`[^`\\r\\n]+`/,\n        alias: 'keyword'\n      }, {\n        // ```optional language\n        // code block\n        // ```\n        pattern: /^```[\\s\\S]*?^```$/m,\n        greedy: true,\n        inside: {\n          'code-block': {\n            pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n            lookbehind: true\n          },\n          'code-language': {\n            pattern: /^(```).+/,\n            lookbehind: true\n          },\n          punctuation: /```/\n        }\n      }],\n      title: [{\n        // title 1\n        // =======\n        // title 2\n        // -------\n        pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)(?=[ \\t]*$)/m,\n        alias: 'important',\n        inside: {\n          punctuation: /==+$|--+$/\n        }\n      }, {\n        // # title 1\n        // ###### title 6\n        pattern: /(^\\s*)#+.+/m,\n        lookbehind: true,\n        alias: 'important',\n        inside: {\n          punctuation: /^#+|#+$/\n        }\n      }],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(/__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source, true),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(/_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source, true),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source, false),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /~~?/\n        }\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/.source, false),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          variable: {\n            pattern: /(\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          content: {\n            pattern: /(^!?\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          string: {\n            pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n          }\n        }\n      }\n    });\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;\n      ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n        }\n      });\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return;\n      }\n\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return;\n        }\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n\n          if (token.type !== 'code') {\n            walkTokens(token.content);\n            continue;\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n\n\n          var codeLang = token.content[1];\n          var codeBlock = token.content[3];\n\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n            // this might be a language that Prism does not support\n            var alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase(); // add alias\n\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias];\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias];\n            } else {\n              codeBlock.alias.push(alias);\n            }\n          }\n        }\n      }\n\n      walkTokens(env.tokens);\n    });\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return;\n      }\n\n      var codeLang = '';\n\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i];\n        var match = /language-(.+)/.exec(cls);\n\n        if (match) {\n          codeLang = match[1];\n          break;\n        }\n      }\n\n      var grammar = Prism.languages[codeLang];\n\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n          env.attributes['id'] = id;\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id);\n\n            if (ele) {\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n            }\n          });\n        }\n      } else {\n        // reverse Prism.util.encode\n        var code = env.content.value.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n        env.content = Prism.highlight(code, grammar, codeLang);\n      }\n    });\n    Prism.languages.md = Prism.languages.markdown;\n  })(Prism);\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/destul/Desktop/cs-central/node_modules/refractor/lang/markdown.js"],"names":["module","exports","markdown","displayName","aliases","Prism","inner","source","createInline","pattern","starAlternative","replace","RegExp","tableCell","tableRow","tableLine","languages","extend","insertBefore","blockquote","alias","table","inside","lookbehind","punctuation","code","greedy","title","hr","list","variable","string","bold","content","italic","strike","url","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","trim","split","toLowerCase","push","classes","cls","match","exec","grammar","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","highlight","textContent","value","md"],"mappings":"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","file":"x","sourcesContent":["'use strict'\n\nmodule.exports = markdown\nmarkdown.displayName = 'markdown'\nmarkdown.aliases = ['md']\nfunction markdown(Prism) {\n  ;(function(Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\r?\\n|\\r)(?!\\r?\\n|\\r))/.source\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.\n     * @returns {RegExp}\n     */\n    function createInline(pattern, starAlternative) {\n      pattern = pattern.replace(/<inner>/g, inner)\n      if (starAlternative) {\n        pattern = pattern + '|' + pattern.replace(/_/g, '\\\\*')\n      }\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')')\n    }\n    var tableCell = /(?:\\\\.|``.+?``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\r?\\n|\\r)|$)/.source.replace(\n      /__/g,\n      tableCell\n    )\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\r?\\n|\\r)/\n      .source\n    Prism.languages.markdown = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp(\n          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',\n          'm'\n        ),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp(\n              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'\n            ),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [\n        {\n          // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n          pattern: /(^[ \\t]*(?:\\r?\\n|\\r))(?: {4}|\\t).+(?:(?:\\r?\\n|\\r)(?: {4}|\\t).+)*/m,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        {\n          // `code`\n          // ``code``\n          pattern: /``.+?``|`[^`\\r\\n]+`/,\n          alias: 'keyword'\n        },\n        {\n          // ```optional language\n          // code block\n          // ```\n          pattern: /^```[\\s\\S]*?^```$/m,\n          greedy: true,\n          inside: {\n            'code-block': {\n              pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n              lookbehind: true\n            },\n            'code-language': {\n              pattern: /^(```).+/,\n              lookbehind: true\n            },\n            punctuation: /```/\n          }\n        }\n      ],\n      title: [\n        {\n          // title 1\n          // =======\n          // title 2\n          // -------\n          pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)(?=[ \\t]*$)/m,\n          alias: 'important',\n          inside: {\n            punctuation: /==+$|--+$/\n          }\n        },\n        {\n          // # title 1\n          // ###### title 6\n          pattern: /(^\\s*)#+.+/m,\n          lookbehind: true,\n          alias: 'important',\n          inside: {\n            punctuation: /^#+|#+$/\n          }\n        }\n      ],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(\n          /__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source,\n          true\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(\n          /_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source,\n          true\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source, false),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /~~?/\n        }\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(\n          /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/\n            .source,\n          false\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          variable: {\n            pattern: /(\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          content: {\n            pattern: /(^!?\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          string: {\n            pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n          }\n        }\n      }\n    })\n    ;['url', 'bold', 'italic', 'strike'].forEach(function(token) {\n      ;['url', 'bold', 'italic', 'strike'].forEach(function(inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] =\n            Prism.languages.markdown[inside]\n        }\n      })\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return\n      }\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return\n        }\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (token.type !== 'code') {\n            walkTokens(token.content)\n            continue\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n          var codeLang = token.content[1]\n          var codeBlock = token.content[3]\n          if (\n            codeLang &&\n            codeBlock &&\n            codeLang.type === 'code-language' &&\n            codeBlock.type === 'code-block' &&\n            typeof codeLang.content === 'string'\n          ) {\n            // this might be a language that Prism does not support\n            var alias =\n              'language-' +\n              codeLang.content\n                .trim()\n                .split(/\\s+/)[0]\n                .toLowerCase() // add alias\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias]\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias]\n            } else {\n              codeBlock.alias.push(alias)\n            }\n          }\n        }\n      }\n      walkTokens(env.tokens)\n    })\n    Prism.hooks.add('wrap', function(env) {\n      if (env.type !== 'code-block') {\n        return\n      }\n      var codeLang = ''\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i]\n        var match = /language-(.+)/.exec(cls)\n        if (match) {\n          codeLang = match[1]\n          break\n        }\n      }\n      var grammar = Prism.languages[codeLang]\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id =\n            'md-' +\n            new Date().valueOf() +\n            '-' +\n            Math.floor(Math.random() * 1e16)\n          env.attributes['id'] = id\n          Prism.plugins.autoloader.loadLanguages(codeLang, function() {\n            var ele = document.getElementById(id)\n            if (ele) {\n              ele.innerHTML = Prism.highlight(\n                ele.textContent,\n                Prism.languages[codeLang],\n                codeLang\n              )\n            }\n          })\n        }\n      } else {\n        // reverse Prism.util.encode\n        var code = env.content.value\n          .replace(/&lt;/g, '<')\n          .replace(/&amp;/g, '&')\n        env.content = Prism.highlight(code, grammar, codeLang)\n      }\n    })\n    Prism.languages.md = Prism.languages.markdown\n  })(Prism)\n}\n"]}}