{"code":"(this[\"webpackJsonpcs-central\"]=this[\"webpackJsonpcs-central\"]||[]).push([[104],{584:function(e,s,a){\"use strict\";function n(e){e.languages.processing=e.languages.extend(\"clike\",{keyword:/\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,operator:/<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/}),e.languages.insertBefore(\"processing\",\"number\",{constant:/\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,type:{pattern:/\\b(?:boolean|byte|char|color|double|float|int|XML|[A-Z]\\w*)\\b/,alias:\"variable\"}}),e.languages.processing.function.pattern=/\\w+(?=\\s*\\()/,e.languages.processing[\"class-name\"].alias=\"variable\"}e.exports=n,n.displayName=\"processing\",n.aliases=[]}}]);","name":"static/js/react-syntax-highlighter_languages_refractor_processing.4c85ed55.chunk.js","map":{"version":3,"sources":["static/js/react-syntax-highlighter_languages_refractor_processing.4c85ed55.chunk.js"],"names":["this","push","584","module","exports","__webpack_require__","processing","Prism","languages","extend","keyword","operator","insertBefore","constant","type","pattern","alias","displayName","aliases"],"mappings":"CAACA,KAAK,0BAA4BA,KAAK,2BAA6B,IAAIC,KAAK,CAAC,CAAC,KAAK,CAE9EC,IACA,SAAUC,EAAQC,EAASC,GAEjC,aAOA,SAASC,EAAWC,GAClBA,EAAMC,UAAUF,WAAaC,EAAMC,UAAUC,OAAO,QAAS,CAC3DC,QAAS,qKACTC,SAAU,8CAEZJ,EAAMC,UAAUI,aAAa,aAAc,SAAU,CAEnDC,SAAU,8BACVC,KAAM,CACJC,QAAS,gEACTC,MAAO,cAIXT,EAAMC,UAAUF,WAAqB,SAAES,QAAU,eAEjDR,EAAMC,UAAUF,WAAW,cAAcU,MAAQ,WApBnDb,EAAOC,QAAUE,EACjBA,EAAWW,YAAc,aACzBX,EAAWY,QAAU"},"input":"(this[\"webpackJsonpcs-central\"] = this[\"webpackJsonpcs-central\"] || []).push([[104],{\n\n/***/ 584:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = processing;\nprocessing.displayName = 'processing';\nprocessing.aliases = [];\n\nfunction processing(Prism) {\n  Prism.languages.processing = Prism.languages.extend('clike', {\n    keyword: /\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,\n    operator: /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/\n  });\n  Prism.languages.insertBefore('processing', 'number', {\n    // Special case: XML is a type\n    constant: /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,\n    type: {\n      pattern: /\\b(?:boolean|byte|char|color|double|float|int|XML|[A-Z]\\w*)\\b/,\n      alias: 'variable'\n    }\n  }); // Spaces are allowed between function name and parenthesis\n\n  Prism.languages.processing['function'].pattern = /\\w+(?=\\s*\\()/; // Class-names is not styled by default\n\n  Prism.languages.processing['class-name'].alias = 'variable';\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/destul/Desktop/cs-central/node_modules/refractor/lang/processing.js"],"names":["module","exports","processing","displayName","aliases","Prism","languages","extend","keyword","operator","insertBefore","constant","type","pattern","alias"],"mappings":";;;;;;AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AACAA,UAAU,CAACC,WAAX,GAAyB,YAAzB;AACAD,UAAU,CAACE,OAAX,GAAqB,EAArB;;AACA,SAASF,UAAT,CAAoBG,KAApB,EAA2B;AACzBA,OAAK,CAACC,SAAN,CAAgBJ,UAAhB,GAA6BG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AAC3DC,WAAO,EAAE,oKADkD;AAE3DC,YAAQ,EAAE;AAFiD,GAAhC,CAA7B;AAIAJ,OAAK,CAACC,SAAN,CAAgBI,YAAhB,CAA6B,YAA7B,EAA2C,QAA3C,EAAqD;AACnD;AACAC,YAAQ,EAAE,6BAFyC;AAGnDC,QAAI,EAAE;AACJC,aAAO,EAAE,+DADL;AAEJC,WAAK,EAAE;AAFH;AAH6C,GAArD,EALyB,CAYtB;;AACHT,OAAK,CAACC,SAAN,CAAgBJ,UAAhB,CAA2B,UAA3B,EAAuCW,OAAvC,GAAiD,cAAjD,CAbyB,CAauC;;AAChER,OAAK,CAACC,SAAN,CAAgBJ,UAAhB,CAA2B,YAA3B,EAAyCY,KAAzC,GAAiD,UAAjD;AACD,C","file":"x","sourcesContent":["'use strict'\n\nmodule.exports = processing\nprocessing.displayName = 'processing'\nprocessing.aliases = []\nfunction processing(Prism) {\n  Prism.languages.processing = Prism.languages.extend('clike', {\n    keyword: /\\b(?:break|catch|case|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,\n    operator: /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/\n  })\n  Prism.languages.insertBefore('processing', 'number', {\n    // Special case: XML is a type\n    constant: /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,\n    type: {\n      pattern: /\\b(?:boolean|byte|char|color|double|float|int|XML|[A-Z]\\w*)\\b/,\n      alias: 'variable'\n    }\n  }) // Spaces are allowed between function name and parenthesis\n  Prism.languages.processing['function'].pattern = /\\w+(?=\\s*\\()/ // Class-names is not styled by default\n  Prism.languages.processing['class-name'].alias = 'variable'\n}\n"]}}