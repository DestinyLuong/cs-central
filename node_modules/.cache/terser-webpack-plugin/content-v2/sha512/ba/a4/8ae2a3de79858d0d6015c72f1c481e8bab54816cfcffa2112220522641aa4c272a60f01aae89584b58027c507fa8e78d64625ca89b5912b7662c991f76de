{"code":"(this[\"webpackJsonpcs-central\"]=this[\"webpackJsonpcs-central\"]||[]).push([[81],{445:function(e,n,t){\"use strict\";function a(e){!function(e){function n(e,n){return\"___\"+e.toUpperCase()+n+\"___\"}Object.defineProperties(e.languages[\"markup-templating\"]={},{buildPlaceholders:{value:function(t,a,r,o){if(t.language===a){var c=t.tokenStack=[];t.code=t.code.replace(r,(function(e){if(\"function\"===typeof o&&!o(e))return e;for(var r,i=c.length;-1!==t.code.indexOf(r=n(a,i));)++i;return c[i]=e,r})),t.grammar=e.languages.markup}}},tokenizePlaceholders:{value:function(t,a){if(t.language===a&&t.tokenStack){t.grammar=e.languages[a];var r=0,o=Object.keys(t.tokenStack);!function c(i){for(var s=0;s<i.length&&!(r>=o.length);s++){var u=i[s];if(\"string\"===typeof u||u.content&&\"string\"===typeof u.content){var p=o[r],l=t.tokenStack[p],g=\"string\"===typeof u?u:u.content,f=n(a,p),k=g.indexOf(f);if(k>-1){++r;var h=g.substring(0,k),m=new e.Token(a,e.tokenize(l,t.grammar),\"language-\"+a,l),d=g.substring(k+f.length),y=[];h&&y.push.apply(y,c([h])),y.push(m),d&&y.push.apply(y,c([d])),\"string\"===typeof u?i.splice.apply(i,[s,1].concat(y)):u.content=y}}else u.content&&c(u.content)}return i}(t.tokens)}}}})}(e)}e.exports=a,a.displayName=\"markupTemplating\",a.aliases=[]}}]);","name":"static/js/react-syntax-highlighter_languages_refractor_markupTemplating.df6105bd.chunk.js","map":{"version":3,"sources":["static/js/react-syntax-highlighter_languages_refractor_markupTemplating.df6105bd.chunk.js"],"names":["this","push","445","module","exports","__webpack_require__","markupTemplating","Prism","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","apply","splice","concat","displayName","aliases"],"mappings":"CAACA,KAAK,0BAA4BA,KAAK,2BAA6B,IAAIC,KAAK,CAAC,CAAC,IAAI,CAE7EC,IACA,SAAUC,EAAQC,EAASC,GAEjC,aAOA,SAASC,EAAiBC,IAGxB,SAAWA,GAQT,SAASC,EAAeC,EAAUC,GAChC,MAAO,MAAQD,EAASE,cAAgBD,EAAQ,MAGlDE,OAAOC,iBAAiBN,EAAMO,UAAU,qBAAuB,GAAI,CACjEC,kBAAmB,CAYjBC,MAAO,SAAeC,EAAKR,EAAUS,EAAoBC,GACvD,GAAIF,EAAIR,WAAaA,EAArB,CAIA,IAAIW,EAAaH,EAAIG,WAAa,GAClCH,EAAII,KAAOJ,EAAII,KAAKC,QAAQJ,GAAoB,SAAUK,GACxD,GAA6B,oBAAlBJ,IAAiCA,EAAcI,GACxD,OAAOA,EAMT,IAHA,IACIC,EADAC,EAAIL,EAAWM,QAGqD,IAAjET,EAAII,KAAKM,QAAQH,EAAchB,EAAeC,EAAUgB,OAC3DA,EAKJ,OADAL,EAAWK,GAAKF,EACTC,KAGTP,EAAIW,QAAUrB,EAAMO,UAAUe,UAGlCC,qBAAsB,CAOpBd,MAAO,SAAeC,EAAKR,GACzB,GAAIQ,EAAIR,WAAaA,GAAaQ,EAAIG,WAAtC,CAKAH,EAAIW,QAAUrB,EAAMO,UAAUL,GAC9B,IAAIsB,EAAI,EACJC,EAAOpB,OAAOoB,KAAKf,EAAIG,aAE3B,SAASa,EAAWC,GAClB,IAAK,IAAIT,EAAI,EAAGA,EAAIS,EAAOR,UAErBK,GAAKC,EAAKN,QAFmBD,IAAK,CAMtC,IAAIU,EAAQD,EAAOT,GAEnB,GAAqB,kBAAVU,GAAsBA,EAAMC,SAAoC,kBAAlBD,EAAMC,QAAsB,CACnF,IAAIC,EAAIL,EAAKD,GACTO,EAAIrB,EAAIG,WAAWiB,GACnBE,EAAqB,kBAAVJ,EAAqBA,EAAQA,EAAMC,QAC9CZ,EAAchB,EAAeC,EAAU4B,GACvC3B,EAAQ6B,EAAEZ,QAAQH,GAEtB,GAAId,GAAS,EAAG,GACZqB,EACF,IAAIS,EAASD,EAAEE,UAAU,EAAG/B,GACxBgC,EAAS,IAAInC,EAAMoC,MAAMlC,EAAUF,EAAMqC,SAASN,EAAGrB,EAAIW,SAAU,YAAcnB,EAAU6B,GAC3FO,EAAQN,EAAEE,UAAU/B,EAAQc,EAAYE,QACxCoB,EAAc,GAEdN,GACFM,EAAY7C,KAAK8C,MAAMD,EAAab,EAAW,CAACO,KAGlDM,EAAY7C,KAAKyC,GAEbG,GACFC,EAAY7C,KAAK8C,MAAMD,EAAab,EAAW,CAACY,KAG7B,kBAAVV,EACTD,EAAOc,OAAOD,MAAMb,EAAQ,CAACT,EAAG,GAAGwB,OAAOH,IAE1CX,EAAMC,QAAUU,QAGXX,EAAMC,SAGbH,EAAWE,EAAMC,SAIvB,OAAOF,EAGTD,CAAWhB,EAAIiB,aArHvB,CAyHG3B,GAhILJ,EAAOC,QAAUE,EACjBA,EAAiB4C,YAAc,mBAC/B5C,EAAiB6C,QAAU"},"input":"(this[\"webpackJsonpcs-central\"] = this[\"webpackJsonpcs-central\"] || []).push([[81],{\n\n/***/ 445:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                  walkTokens(token.content);\n                }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/destul/Desktop/cs-central/node_modules/refractor/lang/markup-templating.js"],"names":["module","exports","markupTemplating","displayName","aliases","Prism","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","i","length","placeholder","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"x","sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function(Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function(match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"]}}