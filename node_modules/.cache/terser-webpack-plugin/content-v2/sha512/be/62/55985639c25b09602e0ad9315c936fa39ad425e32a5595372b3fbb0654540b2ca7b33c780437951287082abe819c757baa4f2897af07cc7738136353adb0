{"code":"(this[\"webpackJsonpcs-central\"]=this[\"webpackJsonpcs-central\"]||[]).push([[50],{536:function(e,t,n){\"use strict\";function r(e){!function(e){e.languages.haml={\"multiline-comment\":{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,lookbehind:!0,alias:\"comment\"},\"multiline-code\":[{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,lookbehind:!0,inside:{rest:e.languages.ruby}},{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,lookbehind:!0,inside:{rest:e.languages.ruby}}],filter:{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"}}},markup:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,lookbehind:!0,inside:{rest:e.languages.markup}},doctype:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,lookbehind:!0},tag:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,lookbehind:!0,inside:{attributes:[{pattern:/(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,lookbehind:!0,inside:{rest:e.languages.ruby}},{pattern:/\\([^)]+\\)/,inside:{\"attr-value\":{pattern:/(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,lookbehind:!0},\"attr-name\":/[\\w:-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[=(),]/}},{pattern:/\\[[^\\]]+\\]/,inside:{rest:e.languages.ruby}}],punctuation:/[<>]/}},code:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,lookbehind:!0,inside:{rest:e.languages.ruby}},interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"punctuation\"},rest:e.languages.ruby}},punctuation:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,lookbehind:!0}};for(var t=[\"css\",{filter:\"coffee\",language:\"coffeescript\"},\"erb\",\"javascript\",\"less\",\"markdown\",\"ruby\",\"scss\",\"textile\"],n={},r=0,a=t.length;r<a;r++){var i=t[r];i=\"string\"===typeof i?{filter:i,language:i}:i,e.languages[i.language]&&(n[\"filter-\"+i.filter]={pattern:RegExp(\"((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+\".replace(\"{{filter_name}}\",i.filter)),lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"},rest:e.languages[i.language]}})}e.languages.insertBefore(\"haml\",\"filter\",n)}(e)}e.exports=r,r.displayName=\"haml\",r.aliases=[]}}]);","name":"static/js/react-syntax-highlighter_languages_refractor_haml.ed3ff3da.chunk.js","map":{"version":3,"sources":["static/js/react-syntax-highlighter_languages_refractor_haml.ed3ff3da.chunk.js"],"names":["this","push","536","module","exports","__webpack_require__","haml","Prism","languages","multiline-comment","pattern","lookbehind","alias","multiline-code","inside","rest","ruby","filter","filter-name","markup","doctype","tag","attributes","attr-value","attr-name","punctuation","code","interpolation","delimiter","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore","displayName","aliases"],"mappings":"CAACA,KAAK,0BAA4BA,KAAK,2BAA6B,IAAIC,KAAK,CAAC,CAAC,IAAI,CAE7EC,IACA,SAAUC,EAAQC,EAASC,GAEjC,aAOA,SAASC,EAAKC,IASZ,SAAWA,GACTA,EAAMC,UAAUF,KAAO,CAErBG,oBAAqB,CACnBC,QAAS,iEACTC,YAAY,EACZC,MAAO,WAETC,iBAAkB,CAAC,CACjBH,QAAS,+GACTC,YAAY,EACZG,OAAQ,CACNC,KAAMR,EAAMC,UAAUQ,OAEvB,CACDN,QAAS,uFACTC,YAAY,EACZG,OAAQ,CACNC,KAAMR,EAAMC,UAAUQ,QAI1BC,OAAQ,CACNP,QAAS,kFACTC,YAAY,EACZG,OAAQ,CACNI,cAAe,CACbR,QAAS,WACTE,MAAO,cAIbO,OAAQ,CACNT,QAAS,4BACTC,YAAY,EACZG,OAAQ,CACNC,KAAMR,EAAMC,UAAUW,SAG1BC,QAAS,CACPV,QAAS,oCACTC,YAAY,GAEdU,IAAK,CAEHX,QAAS,qGACTC,YAAY,EACZG,OAAQ,CACNQ,WAAY,CAAC,CAGXZ,QAAS,kCACTC,YAAY,EACZG,OAAQ,CACNC,KAAMR,EAAMC,UAAUQ,OAEvB,CACDN,QAAS,YACTI,OAAQ,CACNS,aAAc,CACZb,QAAS,0CACTC,YAAY,GAEda,YAAa,4BACbC,YAAa,WAEd,CACDf,QAAS,aACTI,OAAQ,CACNC,KAAMR,EAAMC,UAAUQ,QAG1BS,YAAa,SAGjBC,KAAM,CACJhB,QAAS,0CACTC,YAAY,EACZG,OAAQ,CACNC,KAAMR,EAAMC,UAAUQ,OAI1BW,cAAe,CACbjB,QAAS,aACTI,OAAQ,CACNc,UAAW,CACTlB,QAAS,WACTE,MAAO,eAETG,KAAMR,EAAMC,UAAUQ,OAG1BS,YAAa,CACXf,QAAS,kCACTC,YAAY,IAWhB,IARA,IAEIkB,EAAU,CAAC,MAAO,CACpBZ,OAAQ,SACRa,SAAU,gBACT,MAAO,aAAc,OAAQ,WAAY,OAAQ,OAAQ,WACxDC,EAAc,GAETC,EAAI,EAAGC,EAAIJ,EAAQK,OAAQF,EAAIC,EAAGD,IAAK,CAC9C,IAAIf,EAASY,EAAQG,GACrBf,EAA2B,kBAAXA,EAAsB,CACpCA,OAAQA,EACRa,SAAUb,GACRA,EAEAV,EAAMC,UAAUS,EAAOa,YACzBC,EAAY,UAAYd,EAAOA,QAAU,CACvCP,QAASyB,OAjBM,wGAiBgBC,QAAQ,kBAAmBnB,EAAOA,SACjEN,YAAY,EACZG,OAAQ,CACNI,cAAe,CACbR,QAAS,WACTE,MAAO,YAETG,KAAMR,EAAMC,UAAUS,EAAOa,aAMrCvB,EAAMC,UAAU6B,aAAa,OAAQ,SAAUN,GAhIjD,CAiIGxB,GA9ILJ,EAAOC,QAAUE,EACjBA,EAAKgC,YAAc,OACnBhC,EAAKiC,QAAU"},"input":"(this[\"webpackJsonpcs-central\"] = this[\"webpackJsonpcs-central\"] || []).push([[50],{\n\n/***/ 536:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = haml;\nhaml.displayName = 'haml';\nhaml.aliases = [];\n\nfunction haml(Prism) {\n  /* TODO\n  Handle multiline code after tag\n  %foo= some |\n  multiline |\n  code |\n  */\n  ;\n\n  (function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [{\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      }, {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      }],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            // Lookbehind tries to prevent interpolations from breaking it all\n            // Allows for one nested group of braces\n            pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n            lookbehind: true,\n            inside: {\n              rest: Prism.languages.ruby\n            }\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                lookbehind: true\n              },\n              'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[=(),]/\n            }\n          }, {\n            pattern: /\\[[^\\]]+\\]/,\n            inside: {\n              rest: Prism.languages.ruby\n            }\n          }],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.ruby\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    };\n    var filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'; // Non exhaustive list of available filters and associated languages\n\n    var filters = ['css', {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];\n    var all_filters = {};\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter)),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        };\n      }\n    }\n\n    Prism.languages.insertBefore('haml', 'filter', all_filters);\n  })(Prism);\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/destul/Desktop/cs-central/node_modules/refractor/lang/haml.js"],"names":["module","exports","haml","displayName","aliases","Prism","languages","pattern","lookbehind","alias","inside","rest","ruby","filter","markup","doctype","tag","attributes","punctuation","code","interpolation","delimiter","filter_pattern","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"mappings":"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","file":"x","sourcesContent":["'use strict'\n\nmodule.exports = haml\nhaml.displayName = 'haml'\nhaml.aliases = []\nfunction haml(Prism) {\n  /* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/\n  ;(function(Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [\n        {\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.ruby\n          }\n        },\n        {\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.ruby\n          }\n        }\n      ],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              // Lookbehind tries to prevent interpolations from breaking it all\n              // Allows for one nested group of braces\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n              lookbehind: true,\n              inside: {\n                rest: Prism.languages.ruby\n              }\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                  lookbehind: true\n                },\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[=(),]/\n              }\n            },\n            {\n              pattern: /\\[[^\\]]+\\]/,\n              inside: {\n                rest: Prism.languages.ruby\n              }\n            }\n          ],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.ruby\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    }\n    var filter_pattern =\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n    var filters = [\n      'css',\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'erb',\n      'javascript',\n      'less',\n      'markdown',\n      'ruby',\n      'scss',\n      'textile'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', filter.filter)\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\n  })(Prism)\n}\n"]}}