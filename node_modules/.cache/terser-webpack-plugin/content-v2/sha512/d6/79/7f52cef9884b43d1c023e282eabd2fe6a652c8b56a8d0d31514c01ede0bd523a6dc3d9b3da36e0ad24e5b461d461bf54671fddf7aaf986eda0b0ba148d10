{"code":"(this[\"webpackJsonpcs-central\"]=this[\"webpackJsonpcs-central\"]||[]).push([[72],{555:function(e,s,t){\"use strict\";function n(e){e.languages.less=e.languages.extend(\"css\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(^|[^\\\\])\\/\\/.*/,lookbehind:!0}],atrule:{pattern:/@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,inside:{punctuation:/[:()]/}},selector:{pattern:/(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,inside:{variable:/@+[\\w-]+/}},property:/(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,operator:/[+\\-*\\/]/}),e.languages.insertBefore(\"less\",\"property\",{variable:[{pattern:/@[\\w-]+\\s*:/,inside:{punctuation:/:/}},/@@?[\\w-]+/],\"mixin-usage\":{pattern:/([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,lookbehind:!0,alias:\"function\"}})}e.exports=n,n.displayName=\"less\",n.aliases=[]}}]);","name":"static/js/react-syntax-highlighter_languages_refractor_less.8588a889.chunk.js","map":{"version":3,"sources":["static/js/react-syntax-highlighter_languages_refractor_less.8588a889.chunk.js"],"names":["this","push","555","module","exports","__webpack_require__","less","Prism","languages","extend","comment","pattern","lookbehind","atrule","inside","punctuation","selector","variable","property","operator","insertBefore","mixin-usage","alias","displayName","aliases"],"mappings":"CAACA,KAAK,0BAA4BA,KAAK,2BAA6B,IAAIC,KAAK,CAAC,CAAC,IAAI,CAE7EC,IACA,SAAUC,EAAQC,EAASC,GAEjC,aAOA,SAASC,EAAKC,GAQZA,EAAMC,UAAUF,KAAOC,EAAMC,UAAUC,OAAO,MAAO,CACnDC,QAAS,CAAC,mBAAoB,CAC5BC,QAAS,kBACTC,YAAY,IAEdC,OAAQ,CACNF,QAAS,8CACTG,OAAQ,CACNC,YAAa,UAIjBC,SAAU,CACRL,QAAS,yEACTG,OAAQ,CAENG,SAAU,aAGdC,SAAU,2CACVC,SAAU,aAEZZ,EAAMC,UAAUY,aAAa,OAAQ,WAAY,CAC/CH,SAAU,CACV,CACEN,QAAS,cACTG,OAAQ,CACNC,YAAa,MAGjB,aACAM,cAAe,CACbV,QAAS,uCACTC,YAAY,EACZU,MAAO,cA9CbnB,EAAOC,QAAUE,EACjBA,EAAKiB,YAAc,OACnBjB,EAAKkB,QAAU"},"input":"(this[\"webpackJsonpcs-central\"] = this[\"webpackJsonpcs-central\"] || []).push([[72],{\n\n/***/ 555:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = less;\nless.displayName = 'less';\nless.aliases = [];\n\nfunction less(Prism) {\n  /* FIXME :\n  :extend() is not handled specifically : its highlighting is buggy.\n  Mixin usage must be inside a ruleset to be highlighted.\n  At-rules (e.g. import) containing interpolations are buggy.\n  Detached rulesets are highlighted as at-rules.\n  A comment before a mixin usage prevents the latter to be properly highlighted.\n  */\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(^|[^\\\\])\\/\\/.*/,\n      lookbehind: true\n    }],\n    atrule: {\n      pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n    operator: /[+\\-*\\/]/\n  });\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [// Variable declaration (the colon must be consumed!)\n    {\n      pattern: /@[\\w-]+\\s*:/,\n      inside: {\n        punctuation: /:/\n      }\n    }, // Variable usage\n    /@@?[\\w-]+/],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  });\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/destul/Desktop/cs-central/node_modules/refractor/lang/less.js"],"names":["module","exports","less","displayName","aliases","Prism","languages","extend","comment","pattern","lookbehind","atrule","inside","punctuation","selector","variable","property","operator","insertBefore","alias"],"mappings":";;;;;;AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACEA,OAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,KAAvB,EAA8B;AACnDC,WAAO,EAAE,CACP,kBADO,EAEP;AACEC,aAAO,EAAE,iBADX;AAEEC,gBAAU,EAAE;AAFd,KAFO,CAD0C;AAQnDC,UAAM,EAAE;AACNF,aAAO,EAAE,6CADH;AAENG,YAAM,EAAE;AACNC,mBAAW,EAAE;AADP;AAFF,KAR2C;AAcnD;AACAC,YAAQ,EAAE;AACRL,aAAO,EAAE,wEADD;AAERG,YAAM,EAAE;AACN;AACAG,gBAAQ,EAAE;AAFJ;AAFA,KAfyC;AAsBnDC,YAAQ,EAAE,0CAtByC;AAuBnDC,YAAQ,EAAE;AAvByC,GAA9B,CAAvB;AAyBAZ,OAAK,CAACC,SAAN,CAAgBY,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAC/CH,YAAQ,EAAE,CACR;AACA;AACEN,aAAO,EAAE,aADX;AAEEG,YAAM,EAAE;AACNC,mBAAW,EAAE;AADP;AAFV,KAFQ,EAOL;AACH,eARQ,CADqC;AAW/C,mBAAe;AACbJ,aAAO,EAAE,sCADI;AAEbC,gBAAU,EAAE,IAFC;AAGbS,WAAK,EAAE;AAHM;AAXgC,GAAjD;AAiBD,C","file":"x","sourcesContent":["'use strict'\n\nmodule.exports = less\nless.displayName = 'less'\nless.aliases = []\nfunction less(Prism) {\n  /* FIXME :\n:extend() is not handled specifically : its highlighting is buggy.\nMixin usage must be inside a ruleset to be highlighted.\nAt-rules (e.g. import) containing interpolations are buggy.\nDetached rulesets are highlighted as at-rules.\nA comment before a mixin usage prevents the latter to be properly highlighted.\n*/\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^|[^\\\\])\\/\\/.*/,\n        lookbehind: true\n      }\n    ],\n    atrule: {\n      pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n    operator: /[+\\-*\\/]/\n  })\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [\n      // Variable declaration (the colon must be consumed!)\n      {\n        pattern: /@[\\w-]+\\s*:/,\n        inside: {\n          punctuation: /:/\n        }\n      }, // Variable usage\n      /@@?[\\w-]+/\n    ],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  })\n}\n"]}}